{
    "manifests": {
        "shopware/core": {
            "manifest": {
                "copy-from-recipe": {
                    "bin/": "%BIN_DIR%/",
                    "tests/": "tests/",
                    "root/": ""
                },
                "post-install-output": [
                    "  * <fg=blue>Setup</> your repository:",
                    "",
                    "    1. Go to the project directory",
                    "    2. Create your code repository with the <comment>git init</comment> command and push it to your favourite Git service"
                ]
            },
            "files": {
                "bin/EslintScripts.php": {
                    "contents": [
                        "<?php",
                        "",
                        "namespace Krme;",
                        "",
                        "class EslintScripts",
                        "{",
                        "    public static function administrationFix(): void {",
                        "        if (!is_dir(dirname(__DIR__ . '/../src/Resources/app/administration'))) {",
                        "            return;",
                        "        }",
                        "",
                        "        self::installAdminNodeModules();",
                        "        $shopwareRoot = self::getShopwareRoot();",
                        "",
                        "        shell_exec(sprintf(\"%svendor/shopware/storefront/Resources/app/storefront/node_modules/.bin/eslint --ignore-path .eslintignore --rule 'sw-deprecation-rules/private-feature-declarations: off' --config %svendor/shopware/administration/Resources/app/administration/.eslintrc.js --ext .js,.vue --fix src/Resources/app/administration\", $shopwareRoot, $shopwareRoot));",
                        "    }",
                        "    public static function administrationLint(): void {",
                        "        if (!is_dir(dirname(__DIR__ . '/../src/Resources/app/administration'))) {",
                        "            return;",
                        "        }",
                        "",
                        "        self::installAdminNodeModules();",
                        "        $shopwareRoot = self::getShopwareRoot();",
                        "",
                        "        shell_exec(sprintf(\"%svendor/shopware/storefront/Resources/app/storefront/node_modules/.bin/eslint --ignore-path .eslintignore --rule 'sw-deprecation-rules/private-feature-declarations: off' --config %svendor/shopware/administration/Resources/app/administration/.eslintrc.js --ext .js,.vue src/Resources/app/administration\", $shopwareRoot, $shopwareRoot));",
                        "    }",
                        "",
                        "    public static function storefrontFix(): void {",
                        "        if (!is_dir(dirname(__DIR__ . '/../src/Resources/app/storefront'))) {",
                        "            return;",
                        "        }",
                        "",
                        "        self::installStorefrontNodeModules();",
                        "        $shopwareRoot = self::getShopwareRoot();",
                        "",
                        "        shell_exec(sprintf(\"%svendor/shopware/storefront/Resources/app/storefront/node_modules/.bin/eslint --ignore-path .eslintignore --config %svendor/shopware/storefront/Resources/app/storefront/.eslintrc.js --ext .js,.vue src/Resources/app/storefront\", $shopwareRoot, $shopwareRoot));",
                        "    }",
                        "    public static function storefrontLint(): void {",
                        "        if (!is_dir(dirname(__DIR__ . '/../src/Resources/app/storefront'))) {",
                        "            return;",
                        "        }",
                        "",
                        "        self::installStorefrontNodeModules();",
                        "        $shopwareRoot = self::getShopwareRoot();",
                        "",
                        "        shell_exec(sprintf(\"%svendor/shopware/storefront/Resources/app/storefront/node_modules/.bin/eslint --ignore-path .eslintignore --config %svendor/shopware/storefront/Resources/app/storefront/.eslintrc.js --ext .js,.vue --fix src/Resources/app/storefront\", $shopwareRoot, $shopwareRoot));",
                        "    }",
                        "",
                        "",
                        "    public static function stylelintFix(): void {",
                        "        if (!is_dir(dirname(__DIR__ . '/../src/Resources/app/storefront'))) {",
                        "            return;",
                        "        }",
                        "",
                        "        self::installStorefrontNodeModules();",
                        "        $shopwareRoot = self::getShopwareRoot();",
                        "",
                        "        shell_exec(sprintf(\"%svendor/shopware/storefront/Resources/app/storefront/node_modules/.bin/stylelint \\\"./src/Resources/app/storefront/**/*.scss\\\" --syntax scss --config ./.stylelintrc\", $shopwareRoot));",
                        "    }",
                        "    public static function stylelintLint(): void {",
                        "        if (!is_dir(dirname(__DIR__ . '/../src/Resources/app/storefront'))) {",
                        "            return;",
                        "        }",
                        "",
                        "        self::installStorefrontNodeModules();",
                        "        $shopwareRoot = self::getShopwareRoot();",
                        "",
                        "        shell_exec(sprintf(\"%svendor/shopware/storefront/Resources/app/storefront/node_modules/.bin/stylelint \\\"./src/Resources/app/storefront/**/*.scss\\\" --fix --syntax scss --config ./.stylelintrc\", $shopwareRoot));",
                        "    }",
                        "",
                        "    private static function installStorefrontNodeModules(): void {",
                        "        $shopwareRoot = self::getShopwareRoot();",
                        "",
                        "        if (is_dir(dirname($shopwareRoot . 'vendor/shopware/storefront/Resources/app/storefront/node_modules'))) {",
                        "            return;",
                        "        }",
                        "",
                        "        shell_exec(sprintf(\"npm i --prefix %svendor/shopware/storefront/Resources/app/storefront\", $shopwareRoot));",
                        "    }",
                        "    private static function installAdminNodeModules(): void {",
                        "        $shopwareRoot = self::getShopwareRoot();",
                        "",
                        "        if (is_dir(dirname($shopwareRoot . 'vendor/shopware/administration/Resources/app/administration/node_modules'))) {",
                        "            return;",
                        "        }",
                        "",
                        "        shell_exec(sprintf(\"npm i --prefix %svendor/shopware/administration/Resources/app/administration\", $shopwareRoot));",
                        "    }",
                        "    private static function getShopwareRoot(): string {",
                        "        return __DIR__ . '/../../../../';",
                        "    }",
                        "}"
                    ],
                    "executable": false
                },
                "bin/InstallRequireDevScripts.php": {
                    "contents": [
                        "<?php",
                        "",
                        "namespace Krme;",
                        "",
                        "use Composer\\Script\\Event;",
                        "",
                        "class InstallRequireDevScripts",
                        "{",
                        "    public static function installRequiredDevScriptsInShopwareRoot(Event $event): void {",
                        "        $composerRequires = self::getRequireDev($event);",
                        "",
                        "        if (empty($composerRequires)) {",
                        "            return;",
                        "        }",
                        "",
                        "        shell_exec(sprintf(\"cd ../../../ && composer require --dev %s\", $composerRequires));",
                        "    }",
                        "",
                        "    private static function getRequireDev(Event $event): string {",
                        "        $composerRequires = [];",
                        "        $devRequires = $event->getComposer()->getPackage()->getDevRequires();",
                        "        foreach ($devRequires as $devRequire) {",
                        "            if (!is_dir(dirname(__DIR__ . '/../../../../vendor/' . $devRequire->getTarget()))) {",
                        "                $composerRequires[] = $devRequire->getTarget() . ':' . $devRequire->getPrettyConstraint() ?? '*';",
                        "            }",
                        "        }",
                        "",
                        "        return implode(' ', $composerRequires);",
                        "    }",
                        "}"
                    ],
                    "executable": false
                },
                "bin/ShopwareCliScripts.php": {
                    "contents": [
                        "<?php",
                        "",
                        "namespace Krme;",
                        "",
                        "use Composer\\Script\\Event;",
                        "",
                        "class ShopwareCliScripts",
                        "{",
                        "    public static function build(Event $event): void",
                        "    {",
                        "        self::installCli();",
                        "        $pluginRoot = self::getPluginRoot();",
                        "",
                        "        shell_exec(sprintf(\"cd ~ && SHOPWARE_PROJECT_ROOT=/var/www/html shopware-cli extension build %s\", $pluginRoot));",
                        "        shell_exec(sprintf(\"cd %s && composer install --no-dev --no-scripts\", $pluginRoot));",
                        "        shell_exec('cd /var/www/html && bin/console assets:install');",
                        "        shell_exec('cd /var/www/html && bin/console cache:clear');",
                        "    }",
                        "",
                        "    public static function prepare(Event $event): void {",
                        "        self::installCli();",
                        "        $pluginRoot = self::getPluginRoot();",
                        "",
                        "        shell_exec('SHOPWARE_PROJECT_ROOT=/var/www/html shopware-cli extension prepare ' . $pluginRoot);",
                        "    }",
                        "",
                        "    public static function validate(Event $event): void {",
                        "        self::installCli();",
                        "        $pluginRoot = self::getPluginRoot();",
                        "",
                        "        shell_exec('SHOPWARE_PROJECT_ROOT=/var/www/html shopware-cli extension validate ' . $pluginRoot);",
                        "    }",
                        "",
                        "    public static function zip(Event $event): void {",
                        "        self::installCli();",
                        "        $pluginRoot = self::getPluginRoot();",
                        "",
                        "        shell_exec(sprintf(\"SHOPWARE_PROJECT_ROOT=/var/www/html shopware-cli extension zip %s --disable-git --release\", $pluginRoot));",
                        "    }",
                        "",
                        "    public static function watch(Event $event): void {",
                        "        self::installCli();",
                        "        $pluginRoot = self::getPluginRoot();",
                        "",
                        "        shell_exec(sprintf(\"cd /var/www/html && SHOPWARE_PROJECT_ROOT=/var/www/html shopware-cli extension admin-watch %s http://localhost\", $pluginRoot));",
                        "    }",
                        "",
                        "    public static function adminBuild(Event $event): void {",
                        "        self::installCli();",
                        "",
                        "        shell_exec('cd /var/www/html && SHOPWARE_PROJECT_ROOT=/var/www/html shopware-cli project admin-build');",
                        "    }",
                        "",
                        "    public static function storefrontBuild(Event $event): void {",
                        "        self::installCli();",
                        "",
                        "        shell_exec('cd /var/www/html && SHOPWARE_PROJECT_ROOT=/var/www/html shopware-cli project storefront-build');",
                        "    }",
                        "",
                        "    private static function installCli(): void",
                        "    {",
                        "        if (PHP_OS_FAMILY !== 'Linux') {",
                        "            return;",
                        "        }",
                        "",
                        "        if (null === shell_exec(\"command -v shopware-cli\")) {",
                        "            shell_exec(\"curl -1sLf 'https://dl.cloudsmith.io/public/friendsofshopware/stable/setup.deb.sh' | sudo -E bash' && sudo apt install shopware-cli\");",
                        "        }",
                        "    }",
                        "",
                        "    private static function getPluginRoot(): string {",
                        "        return  __DIR__ . '/..';",
                        "    }",
                        "}"
                    ],
                    "executable": false
                },
                "bin/phpstan-config-generator.php": {
                    "contents": [
                        "<?php declare(strict_types=1);",
                        "/*",
                        " * (c) KruseMedien GmbH <info@krusemedien.com>",
                        " * For the full copyright and license information, please view the LICENSE",
                        " * file that was distributed with this source code.",
                        " */",
                        "",
                        "use Shopware\\Core\\Framework\\Plugin\\KernelPluginLoader\\StaticKernelPluginLoader;",
                        "use Shopware\\Core\\Kernel;",
                        "use Symfony\\Component\\Dotenv\\Dotenv;",
                        "",
                        "$classLoader = require __DIR__ . '/../../../../vendor/autoload.php';",
                        "(new Dotenv(true))->load(__DIR__ . '/../../../../.env');",
                        "",
                        "$shopwareVersion = \\Composer\\InstalledVersions::getVersion('shopware/core');",
                        "",
                        "$pluginRootPath = dirname(__DIR__);",
                        "$composerJson = json_decode((string) file_get_contents($pluginRootPath . '/composer.json'), true);",
                        "",
                        "$HerbrandBundle = [",
                        "    'autoload' => $composerJson['autoload'],",
                        "    'baseClass' => \\KrmeHerbrandBundle\\KrmeHerbrandBundle::class,",
                        "    'managedByComposer' => false,",
                        "    'active' => true,",
                        "    'path' => $pluginRootPath,",
                        "    'name' => 'KrmeHerbrandBundle',",
                        "    'version' => $composerJson['version'],",
                        "];",
                        "$pluginLoader = new StaticKernelPluginLoader($classLoader, null, [",
                        "    $HerbrandBundle,",
                        "]);",
                        "",
                        "$kernel = new Kernel('dev', true, $pluginLoader, 'dev', $shopwareVersion, null, dirname(__DIR__, 4) . '/');",
                        "$kernel->boot();",
                        "$projectDir = $kernel->getProjectDir();",
                        "$cacheDir = $kernel->getCacheDir();",
                        "",
                        "$relativeCacheDir = str_replace($projectDir, '', $cacheDir);",
                        "",
                        "$phpStanConfigDist = file_get_contents(__DIR__ . '/../phpstan.neon.dist');",
                        "if ($phpStanConfigDist === false) {",
                        "    throw new RuntimeException('phpstan.neon.dist file not found');",
                        "}",
                        "",
                        "// because the cache dir is hashed by Shopware, we need to set the PHPStan config dynamically",
                        "$phpStanConfig = str_replace(",
                        "    [",
                        "        \"\\n        # the placeholder \\\"%ShopwareHashedCacheDir%\\\" will be replaced on execution by bin/phpstan-config-generator.php script\",",
                        "        '%ShopwareHashedCacheDir%',",
                        "    ],",
                        "    [",
                        "        '',",
                        "        $relativeCacheDir,",
                        "    ],",
                        "    $phpStanConfigDist",
                        ");",
                        "",
                        "file_put_contents(__DIR__ . '/../phpstan.neon', $phpStanConfig);",
                        ""
                    ],
                    "executable": false
                },
                "bin/plugins.php": {
                    "contents": [
                        "<?php",
                        "return [",
                        "",
                        "];"
                    ],
                    "executable": false
                },
                "bin/rector-config-generator.php": {
                    "contents": [
                        "<?php declare(strict_types=1);",
                        "/*",
                        " * (c) KruseMedien GmbH <info@krusemedien.com>",
                        " * For the full copyright and license information, please view the LICENSE",
                        " * file that was distributed with this source code.",
                        " */",
                        "",
                        "use Shopware\\Core\\Framework\\Plugin\\KernelPluginLoader\\StaticKernelPluginLoader;",
                        "use Shopware\\Core\\Kernel;",
                        "use Symfony\\Component\\Dotenv\\Dotenv;",
                        "",
                        "$classLoader = require __DIR__ . '/../../../../vendor/autoload.php';",
                        "(new Dotenv(true))->load(__DIR__ . '/../../../../.env');",
                        "",
                        "$shopwareVersion = \\Composer\\InstalledVersions::getVersion('shopware/core');",
                        "",
                        "$pluginRootPath = dirname(__DIR__);",
                        "$pluginLoader = new StaticKernelPluginLoader($classLoader, null, []);",
                        "",
                        "$kernel = new Kernel('dev', true, $pluginLoader, $shopwareVersion);",
                        "$kernel->boot();",
                        "$projectDir = $kernel->getProjectDir();",
                        "$cacheDir = $kernel->getCacheDir();",
                        "",
                        "$relativeCacheDir = str_replace($projectDir, '', $cacheDir);",
                        "",
                        "$rectorConfigDist = file_get_contents(__DIR__ . '/../rector.php.dist');",
                        "if ($rectorConfigDist === false) {",
                        "    throw new RuntimeException('rector.yaml.dist file not found');",
                        "}",
                        "",
                        "// because the cache dir is hashed by Shopware, we need to set the PHPStan config dynamically",
                        "$rectorConfig = str_replace(",
                        "    [",
                        "        \"\\n        # the placeholder \\\"%ShopwareHashedCacheDir%\\\" will be replaced on execution by bin/rector-config-generator.php script\",",
                        "        '%ShopwareHashedCacheDir%',",
                        "    ],",
                        "    [",
                        "        '',",
                        "        $relativeCacheDir,",
                        "    ],",
                        "    $rectorConfigDist",
                        ");",
                        "",
                        "file_put_contents(__DIR__ . '/../rector.php', $rectorConfig);",
                        ""
                    ],
                    "executable": false
                },
                "root/.editorconfig": {
                    "contents": [
                        "# Shopware platform editor configuration normalization",
                        "# http://editorconfig.org/",
                        "",
                        "# This is the top-most .editorconfig file; do not search in parent directories.",
                        "root = true",
                        "",
                        "# All files.",
                        "[*]",
                        "end_of_line = lf",
                        "indent_style = space",
                        "indent_size = 4",
                        "charset = utf-8",
                        "trim_trailing_whitespace = true",
                        "insert_final_newline = false",
                        "",
                        "[*.md]",
                        "trim_trailing_whitespace = false",
                        "",
                        "[*.json]",
                        "indent_size = 2",
                        "",
                        "[*.{yaml,yml}]",
                        "indent_size = 2",
                        "",
                        "[Makefile]",
                        "indent_style = tab",
                        ""
                    ],
                    "executable": false
                },
                "root/.eslintignore": {
                    "contents": [
                        "src/Resources/app/storefront/dist/storefront/js/*",
                        "src/Resources/public/administration/js/*",
                        "coverage/",
                        "tests/e2e/node_modules",
                        "node_modules",
                        "tests/e2e/cypress",
                        "vendor",
                        "src/Resources/app/administration/test/*",
                        ""
                    ],
                    "executable": false
                },
                "root/.gitattributes": {
                    "contents": [
                        "# Reference: https://git-scm.com/docs/gitattributes",
                        "",
                        "# Set the default behavior, in case people don't have core.autocrlf set",
                        "* text=auto",
                        "",
                        "# File specific behaviors",
                        "*.md eol=lf",
                        "",
                        "# Set export ignored files and directories",
                        ".editorconfig export-ignore",
                        ".gitattributes export-ignore",
                        ".gitignore export-ignore",
                        ""
                    ],
                    "executable": false
                },
                "root/.gitignore": {
                    "contents": [
                        "# Reference: https://git-scm.com/docs/gitignore",
                        "",
                        "# Editor-specific metadata folders",
                        ".idea/",
                        ".vscode/",
                        "",
                        "# Logfiles",
                        "*.log",
                        "",
                        "# Node mmodules and lock files",
                        "node_modules/",
                        "package-lock.json",
                        "",
                        "# Composer modules and lock files",
                        "vendor/",
                        "composer.lock",
                        "auth.json",
                        ""
                    ],
                    "executable": false
                },
                "root/.stylelintignore": {
                    "contents": [
                        "vendor",
                        ""
                    ],
                    "executable": false
                },
                "root/.stylelintrc": {
                    "contents": [
                        "{",
                        "    \"extends\": [\"../../../vendor/shopware/storefront/Resources/app/storefront/stylelint.config.js\"],",
                        "    \"rules\": {",
                        "        \"indentation\": 4,",
                        "        \"color-hex-length\": \"short\",",
                        "        \"color-hex-case\": \"lower\",",
                        "        \"alpha-value-notation\": \"number\",",
                        "        \"font-weight-notation\": \"numeric\",",
                        "        \"font-family-name-quotes\": \"always-where-recommended\",",
                        "        \"selector-pseudo-element-colon-notation\": \"double\",",
                        "        \"no-missing-end-of-source-newline\": true,",
                        "        \"property-no-unknown\": [true, { \"severity\": \"warning\" }],",
                        "        \"no-descending-specificity\": null,",
                        "        \"max-nesting-depth\": [3, {",
                        "            \"ignore\": [\"blockless-at-rules\", \"pseudo-classes\"],",
                        "            \"severity\": \"warning\"",
                        "        }],",
                        "        \"declaration-property-value-disallowed-list\": [",
                        "            {",
                        "                \"severity\": \"warning\"",
                        "            }",
                        "        ],",
                        "        \"scss/selector-no-redundant-nesting-selector\": [",
                        "            true,",
                        "            {",
                        "                \"severity\": \"warning\"",
                        "            }",
                        "        ],",
                        "        \"scss/percent-placeholder-pattern\": \"\",",
                        "        \"scss/dollar-variable-pattern\": \"\",",
                        "        \"scss/at-mixin-pattern\": \"\",",
                        "        \"selector-pseudo-element-no-unknown\": [",
                        "            true,",
                        "            {",
                        "                \"severity\": \"warning\"",
                        "            }",
                        "        ],",
                        "        \"color-named\": [",
                        "            \"never\",",
                        "            {",
                        "                \"severity\": \"warning\"",
                        "            }",
                        "        ],",
                        "        \"selector-class-pattern\": [",
                        "            \"^[a-z0-9\\\\-_]+$\",",
                        "            {",
                        "                \"severity\": \"warning\"",
                        "            }",
                        "        ],",
                        "        \"selector-max-compound-selectors\": 6,",
                        "        \"at-rule-no-unknown\": null,",
                        "        \"scss/at-rule-no-unknown\": true,",
                        "        \"selector-max-id\": 2,",
                        "        \"selector-no-vendor-prefix\": null,",
                        "        \"property-no-vendor-prefix\": null,",
                        "        \"property-case\": \"lower\",",
                        "        \"order/order\": [",
                        "            \"custom-properties\",",
                        "            \"dollar-variables\",",
                        "            {",
                        "                \"type\": \"at-rule\",",
                        "                \"hasBlock\": false",
                        "            },",
                        "            \"declarations\",",
                        "            \"rules\",",
                        "            {",
                        "                \"type\": \"at-rule\",",
                        "                \"hasBlock\": true",
                        "            }",
                        "        ],",
                        "        \"value-keyword-case\": \"lower\",",
                        "        \"function-name-case\": \"lower\",",
                        "        \"selector-type-case\": \"lower\",",
                        "        \"rule-empty-line-before\": [",
                        "            \"always\",{",
                        "                \"except\": [",
                        "                    \"after-single-line-comment\",",
                        "                    \"first-nested\"",
                        "                ]",
                        "            }",
                        "        ],",
                        "        \"at-rule-empty-line-before\": [",
                        "            \"always\",{",
                        "                \"except\": [",
                        "                    \"blockless-after-same-name-blockless\",",
                        "                    \"first-nested\"",
                        "                ]",
                        "            }",
                        "        ],",
                        "        \"declaration-empty-line-before\": \"never\",",
                        "        \"unit-case\": \"lower\",",
                        "        \"string-quotes\": \"single\"",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "root/Makefile": {
                    "contents": [
                        ".DEFAULT_GOAL := help",
                        "",
                        "## Variable definition",
                        "BASE_URL?=http://localhost",
                        "PLUGIN_ROOT=$(realpath .)",
                        "PROJECT_ROOT=$(realpath ../../../)",
                        "",
                        "help:",
                        "\t@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = \":.*?## \"}; {printf \"\\033[36m%-30s\\033[0m %s\\n\", $$1, $$2}'",
                        ".PHONY: help",
                        "",
                        "administration-fix: ## Run eslint on the administration files",
                        "\tif [ ! -d $(PROJECT_ROOT)/vendor/shopware/administration/Resources/app/administration/node_modules/ ]; then \\",
                        "\t\tnpm install --prefix $(PROJECT_ROOT)/vendor/shopware/administration/Resources/app/administration; \\",
                        "\tfi",
                        "\t$(PROJECT_ROOT)/vendor/shopware/administration/Resources/app/administration/node_modules/.bin/eslint --ignore-path .eslintignore --rule 'sw-deprecation-rules/private-feature-declarations: off' --config $(PROJECT_ROOT)/vendor/shopware/administration/Resources/app/administration/.eslintrc.js --ext .js,.vue --fix src/Resources/app/administration",
                        ".PHONY: administration-fix",
                        "",
                        "storefront-fix: ## Run eslint on the storefront files",
                        "\tif [ ! -d $(PROJECT_ROOT)/vendor/shopware/storefront/Resources/app/storefront/node_modules/ ]; then \\",
                        "\t\tnpm install --prefix $(PROJECT_ROOT)/vendor/shopware/storefront/Resources/app/storefront; \\",
                        "\tfi",
                        "\t$(PROJECT_ROOT)/vendor/shopware/storefront/Resources/app/storefront/node_modules/.bin/eslint --ignore-path .eslintignore --rule 'sw-deprecation-rules/private-feature-declarations: off' --config $(PROJECT_ROOT)/vendor/shopware/storefront/Resources/app/storefront/.eslintrc.js --ext .js,.vue --fix src/Resources/app/storefront",
                        ".PHONY: storefront-fix",
                        "",
                        "administration-lint: ## Run eslint on the administration files",
                        "\tif [ ! -d $(PROJECT_ROOT)/vendor/shopware/administration/Resources/app/administration/node_modules/ ]; then \\",
                        "\t\tnpm install --prefix $(PROJECT_ROOT)/vendor/shopware/administration/Resources/app/administration; \\",
                        "\tfi",
                        "\t$(PROJECT_ROOT)/vendor/shopware/administration/Resources/app/administration/node_modules/.bin/eslint --ignore-path .eslintignore --rule 'sw-deprecation-rules/private-feature-declarations: off' --config $(PROJECT_ROOT)/vendor/shopware/administration/Resources/app/administration/.eslintrc.js --ext .js,.vue src/Resources/app/administration",
                        ".PHONY: administration-lint",
                        "",
                        "storefront-lint: ## Run eslint on the storefront files",
                        "\tif [ ! -d $(PROJECT_ROOT)/vendor/shopware/storefront/Resources/app/storefront/node_modules/ ]; then \\",
                        "\t\tnpm install --prefix $(PROJECT_ROOT)/vendor/shopware/storefront/Resources/app/storefront; \\",
                        "\tfi",
                        "\t$(PROJECT_ROOT)/vendor/shopware/storefront/Resources/app/storefront/node_modules/.bin/eslint --ignore-path .eslintignore --rule 'sw-deprecation-rules/private-feature-declarations: off' --config $(PROJECT_ROOT)/vendor/shopware/storefront/Resources/app/storefront/.eslintrc.js --ext .js,.vue src/Resources/app/storefront",
                        ".PHONY: storefront-lint",
                        "",
                        "cs-lint: ## Run cs lint",
                        "\tif [ ! -f $(PLUGIN_ROOT)/vendor-builder.lock ]; then \\",
                        "        php vendor-builder.php -c=true; \\",
                        "        echo 'c' > $(PLUGIN_ROOT)/vendor-builder.lock; \\",
                        "    fi",
                        "\tbuilderLock=`cat $(PLUGIN_ROOT)/vendor-builder.lock`; \\",
                        "\tif [ ! $$builderLock = 'c' ]; then \\",
                        "        php vendor-builder.php -c=true; \\",
                        "        echo 'c' > $(PLUGIN_ROOT)/vendor-builder.lock; \\",
                        "    fi",
                        "\techo \"Lint php files\";",
                        "\tphp $(PLUGIN_ROOT)/vendor/vendor/bin/ecs check --config=easy-coding-standard.php src;",
                        ".PHONY: cs-lint",
                        "",
                        "cs-fix: ## Run cs fix",
                        "\tif [ ! -f $(PLUGIN_ROOT)/vendor-builder.lock ]; then \\",
                        "        php vendor-builder.php -c=true; \\",
                        "        echo 'c' > $(PLUGIN_ROOT)/vendor-builder.lock; \\",
                        "    fi",
                        "\tbuilderLock=`cat $(PLUGIN_ROOT)/vendor-builder.lock`; \\",
                        "\tif [ ! $$builderLock = 'c' ]; then \\",
                        "        php vendor-builder.php -c=true; \\",
                        "        echo 'c' > $(PLUGIN_ROOT)/vendor-builder.lock; \\",
                        "    fi",
                        "\techo \"Fix php files\";",
                        "\tphp $(PLUGIN_ROOT)/vendor/vendor/bin/ecs check --config=easy-coding-standard.php src --fix;",
                        ".PHONY: cs-fix",
                        "",
                        "phpunit: ## Run phpunit",
                        "\tif [ ! -f $(PROJECT_ROOT)/var/test/jwt ]; then \\",
                        "\t\tmkdir -p $(PROJECT_ROOT)/var/test/jwt; \\",
                        "\t\tcp -p $(PROJECT_ROOT)/config/jwt/private.pem $(PROJECT_ROOT)/var/test/jwt/private.pem; \\",
                        "\t\tcp -p $(PROJECT_ROOT)/config/jwt/public.pem $(PROJECT_ROOT)/var/test/jwt/public.pem; \\",
                        "\tfi",
                        "\tif [ ! -f $(PLUGIN_ROOT)/vendor-builder.lock ]; then \\",
                        "        php vendor-builder.php; \\",
                        "        echo 'a' > $(PLUGIN_ROOT)/vendor-builder.lock; \\",
                        "    fi",
                        "\tbuilderLock=`cat $(PLUGIN_ROOT)/vendor-builder.lock`; \\",
                        "\tif [ ! $$builderLock = 'a' ]; then \\",
                        "        php vendor-builder.php; \\",
                        "        echo 'a' > $(PLUGIN_ROOT)/vendor-builder.lock; \\",
                        "    fi",
                        "\tSYMFONY_DEPRECATIONS_HELPER=disabled $(PROJECT_ROOT)/vendor/bin/phpunit",
                        ".PHONY: phpunit",
                        "",
                        "phpunit-coverage: ## Run phpunit coverage",
                        "\tcd $(PROJECT_ROOT)/../ && make xdebug-on && cd $(PLUGIN_ROOT);",
                        "\tif [ ! -f $(PROJECT_ROOT)/var/test/jwt ]; then \\",
                        "\t\tmkdir -p $(PROJECT_ROOT)/var/test/jwt; \\",
                        "\t\tcp -p $(PROJECT_ROOT)/config/jwt/private.pem $(PROJECT_ROOT)/var/test/jwt/private.pem; \\",
                        "\t\tcp -p $(PROJECT_ROOT)/config/jwt/public.pem $(PROJECT_ROOT)/var/test/jwt/public.pem; \\",
                        "\tfi",
                        "\tif [ ! -f $(PLUGIN_ROOT)/vendor-builder.lock ]; then \\",
                        "        php vendor-builder.php; \\",
                        "        echo 'a' > $(PLUGIN_ROOT)/vendor-builder.lock; \\",
                        "    fi",
                        "\tbuilderLock=`cat $(PLUGIN_ROOT)/vendor-builder.lock`; \\",
                        "\tif [ ! $$builderLock = 'a' ]; then \\",
                        "        php vendor-builder.php; \\",
                        "        echo 'a' > $(PLUGIN_ROOT)/vendor-builder.lock; \\",
                        "    fi",
                        "\tSYMFONY_DEPRECATIONS_HELPER=disabled XDEBUG_MODE=coverage $(PROJECT_ROOT)/vendor/bin/phpunit --coverage-html coverage",
                        ".PHONY: phpunit-coverage",
                        "",
                        "run-rector: shopware-cli-prepare## Run rector",
                        "\tif [ ! -f $(PLUGIN_ROOT)/vendor-builder.lock ]; then \\",
                        "        php vendor-builder.php -d=true; \\",
                        "        echo 'd' > $(PLUGIN_ROOT)/vendor-builder.lock; \\",
                        "    fi",
                        "\tbuilderLock=`cat $(PLUGIN_ROOT)/vendor-builder.lock`; \\",
                        "\tif [ ! $$builderLock = 'd' ]; then \\",
                        "        php vendor-builder.php -d=true; \\",
                        "        echo 'd' > $(PLUGIN_ROOT)/vendor-builder.lock; \\",
                        "    fi",
                        "\tphp $(PLUGIN_ROOT)/bin/rector-config-generator.php",
                        "\t$(PLUGIN_ROOT)/vendor/vendor/bin/rector process",
                        ".PHONY: run-rector",
                        "",
                        "run-rector-dry: ## Run rector",
                        "\tif [ ! -f $(PLUGIN_ROOT)/vendor-builder.lock ]; then \\",
                        "        php vendor-builder.php -d=true; \\",
                        "        echo 'd' > $(PLUGIN_ROOT)/vendor-builder.lock; \\",
                        "    fi",
                        "\tbuilderLock=`cat $(PLUGIN_ROOT)/vendor-builder.lock`; \\",
                        "\tif [ ! $$builderLock = 'd' ]; then \\",
                        "        php vendor-builder.php -d=true; \\",
                        "        echo 'd' > $(PLUGIN_ROOT)/vendor-builder.lock; \\",
                        "    fi",
                        "\tphp $(PLUGIN_ROOT)/bin/rector-config-generator.php",
                        "\t$(PLUGIN_ROOT)/vendor/vendor/bin/rector process --dry-run",
                        ".PHONY: run-rector-dry",
                        "",
                        "open-cypress: ## Open cypress",
                        "\tif [ ! -d $(PLUGIN_ROOT)/tests/e2e/node_modules/ ]; then \\",
                        "\t\tnpm install --prefix $(PLUGIN_ROOT)/tests/e2e; \\",
                        "\tfi",
                        "\tAPP_URL=http://localhost $(PLUGIN_ROOT)/tests/e2e/node_modules/.bin/cypress open --project tests/e2e --env projectRoot=tests/e2e",
                        ".PHONY: open-cypress",
                        "",
                        "run-cypress: ## Run cypress",
                        "\tif [ ! -d $(PLUGIN_ROOT)/tests/e2e/node_modules/ ]; then \\",
                        "\t\tnpm install --prefix $(PLUGIN_ROOT)/tests/e2e; \\",
                        "\tfi",
                        "\tAPP_URL=http://localhost $(PLUGIN_ROOT)/tests/e2e/node_modules/.bin/cypress run --project tests/e2e --browser=electron --env projectRoot=tests/e2e",
                        ".PHONY: run-cypress",
                        "",
                        "run-phpstan: ## Run php stan",
                        "\tif [ ! -f $(PLUGIN_ROOT)/vendor-builder.lock ]; then \\",
                        "        php vendor-builder.php -p=true; \\",
                        "        echo 't' > $(PLUGIN_ROOT)/vendor-builder.lock; \\",
                        "    fi",
                        "\tbuilderLock=`cat $(PLUGIN_ROOT)/vendor-builder.lock`; \\",
                        "\tif [ ! $$builderLock = 't' ]; then \\",
                        "        php vendor-builder.php -p=true; \\",
                        "        echo 't' > $(PLUGIN_ROOT)/vendor-builder.lock; \\",
                        "    fi",
                        "\tphp $(PLUGIN_ROOT)/bin/phpstan-config-generator.php",
                        "\tphp $(PLUGIN_ROOT)/vendor/vendor/bin/phpstan analyze --configuration $(PLUGIN_ROOT)/phpstan.neon --autoload-file=$(PLUGIN_ROOT)/vendor/vendor/autoload.php src",
                        ".PHONY: run-phpstan",
                        "",
                        "remove-lock-file: ## Remove vendor builder lock file",
                        "\trm -f $(PLUGIN_ROOT)/vendor-builder.lock",
                        ".PHONY: remove-lock-file",
                        "",
                        "development-env: dev disable-http-cache ## Run development-env",
                        ".PHONY: development-env",
                        "",
                        "dev: ## Run dev",
                        "\tsed -i 's/APP_ENV=\\\"prod\\\"/APP_ENV=\"dev\"/g' $(PROJECT_ROOT)/.env",
                        "\tcd $(PROJECT_ROOT) && rm -rf var/cache/*",
                        "\tcd $(PROJECT_ROOT) && rm -rf var/log/*",
                        "\tcd $(PROJECT_ROOT) && php bin/console cache:clear",
                        "\tcd $(PROJECT_ROOT) && php bin/console cache:warmup",
                        ".PHONY: dev",
                        "",
                        "disable-http-cache: ## Run disable-http-cache",
                        "\tsed -i 's/SHOPWARE_HTTP_CACHE_ENABLED=\\\"1\\\"/SHOPWARE_HTTP_CACHE_ENABLED=\"0\"/g' $(PROJECT_ROOT)/.env",
                        "\tcd $(PROJECT_ROOT) && rm -rf var/cache/*",
                        "\tcd $(PROJECT_ROOT) && rm -rf var/log/*",
                        "\tcd $(PROJECT_ROOT) && php bin/console cache:clear",
                        "\tcd $(PROJECT_ROOT) && php bin/console cache:warmup",
                        ".PHONY: disable-http-cache",
                        "",
                        "prod-environment: ## Run prod-environment",
                        "\tsed -i 's/APP_ENV=\\\"dev\\\"/APP_ENV=\"prod\"/g' $(PROJECT_ROOT)/.env",
                        "\tsed -i 's/SHOPWARE_HTTP_CACHE_ENABLED=\\\"0\\\"/SHOPWARE_HTTP_CACHE_ENABLED=\"1\"/g' $(PROJECT_ROOT)/.env",
                        "\tcd $(PROJECT_ROOT) && rm -rf var/cache/*",
                        "\tcd $(PROJECT_ROOT) && rm -rf var/log/*",
                        "\tcd $(PROJECT_ROOT) && php bin/console cache:clear",
                        "\tcd $(PROJECT_ROOT) && php bin/console cache:warmup",
                        ".PHONY: prod-environment",
                        "",
                        "install-sqlite: ## Run install-sqlite",
                        "\tsudo apt update",
                        "\tsudo apt install php7.4-sqlite",
                        "\tsudo phpenmod -v 7.4 pdo_sqlite",
                        ".PHONY: install-sqlite",
                        "",
                        "shopware-cli-install: ## Zip Project",
                        "ifneq (, $(which shopware-cli))",
                        "\tcurl -1sLf 'https://dl.cloudsmith.io/public/friendsofshopware/stable/setup.deb.sh' | sudo -E bash",
                        "\tsudo apt install shopware-cli",
                        "endif",
                        ".PHONY: shopware-cli-install",
                        "",
                        "",
                        "shopware-cli-zip: shopware-cli-install ## Zip Project",
                        "\tcd ~ && SHOPWARE_PROJECT_ROOT=/var/www/html shopware-cli extension zip $(PLUGIN_ROOT) --disable-git --release",
                        ".PHONY: shopware-cli-zip",
                        "",
                        "",
                        "shopware-cli-build: shopware-cli-install ## Build Project",
                        "\tcd ~ && SHOPWARE_PROJECT_ROOT=/var/www/html shopware-cli extension build $(PLUGIN_ROOT)",
                        "\tcd $(PLUGIN_ROOT) && php vendor-builder.php",
                        "\tcd /var/www/html && bin/console assets:install",
                        "\tcd /var/www/html && bin/console cache:clear",
                        ".PHONY: shopware-cli-build",
                        "",
                        "shopware-cli-prepare: shopware-cli-install ## Watch Project",
                        "\tSHOPWARE_PROJECT_ROOT=/var/www/html shopware-cli extension prepare $(PLUGIN_ROOT)",
                        ".PHONY: shopware-cli-prepare",
                        "",
                        "shopware-cli-validate: shopware-cli-install ## Watch Project",
                        "\tSHOPWARE_PROJECT_ROOT=/var/www/html shopware-cli extension validate $(PLUGIN_ROOT)",
                        ".PHONY: shopware-cli-validate",
                        "",
                        "shopware-cli-watch: shopware-cli-install ## Watch Project",
                        "\tcd ~ && SHOPWARE_PROJECT_ROOT=/var/www/html shopware-cli extension admin-watch $(PLUGIN_ROOT) http://localhost",
                        ".PHONY: shopware-cli-watch",
                        "",
                        "prepare-push: administration-fix cs-fix run-phpstan run-rector shopware-cli-prepare shopware-cli-build ## Run prepare push",
                        ".PHONY: prepare-push",
                        "",
                        ""
                    ],
                    "executable": false
                },
                "root/README.md": {
                    "contents": [
                        "# Herbrand Bundle",
                        "",
                        "# Code Style & Code Analysis",
                        "``composer run fix``",
                        "``composer run lint``",
                        "``composer run build``",
                        ""
                    ],
                    "executable": false
                },
                "root/bitbucket-pipelines.yml": {
                    "contents": [
                        "# This is a sample build configuration for PHP.",
                        "# Check our guides at https://confluence.atlassian.com/x/e8YWN for more examples.",
                        "# Only use spaces to indent your .yml configuration.",
                        "# -----",
                        "# You can specify a custom docker image from Docker Hub as your build environment.",
                        "image:",
                        "  name: dockware/dev:latest",
                        "",
                        "definitions:",
                        "  caches:",
                        "    npm: $HOME/.npm",
                        "    cypress: $HOME/.cache/Cypress",
                        "    composer: $HOME/.composer/cache",
                        "",
                        "pipelines:",
                        "  pull-requests:",
                        "    '**':",
                        "      - parallel:",
                        "          - step:",
                        "              name: Run codestyle linters",
                        "              script:",
                        "                - cd /var/www/html/custom/plugins/KrmeHerbrandBundle/",
                        "                - composer lint",
                        "          - step:",
                        "              name: Run PHPUnit Coverage",
                        "              script:",
                        "                - cd /var/www/html/custom/plugins/KrmeHerbrandBundle/",
                        "                - composer phpunit-coverage",
                        "              artifacts:",
                        "                - test-reports/*",
                        "      - step:",
                        "          name: Check Quality on Sonarqube",
                        "          image: newtmitch/sonar-scanner",
                        "          script:",
                        "            - mkdir -p /var/www/html/custom/plugins/",
                        "            - cp -av KrmeHerbrandBundle /var/www/html/custom/plugins/",
                        "            - sonar-scanner -D\"sonar.login=${SONAR_TOKEN}\" -D\"sonar.projectBaseDir=/var/www/html/custom/plugins/KrmeHerbrandBundle\" -D\"sonar.test.inclusions=**/*.spec.js\" -D\"sonar.php.coverage.reportPaths=${BITBUCKET_CLONE_DIR}/test-reports/phpunit.clover.xml\" -D\"sonar.php.tests.reportPath=${BITBUCKET_CLONE_DIR}/test-reports/phpunit.junit.xml\"",
                        ""
                    ],
                    "executable": false
                },
                "root/ecs.php": {
                    "contents": [
                        "<?php declare(strict_types=1);",
                        "",
                        "use PhpCsFixer\\Fixer\\CastNotation\\ModernizeTypesCastingFixer;",
                        "use PhpCsFixer\\Fixer\\ClassNotation\\ClassAttributesSeparationFixer;",
                        "use PhpCsFixer\\Fixer\\Comment\\HeaderCommentFixer;",
                        "use PhpCsFixer\\Fixer\\ConstantNotation\\NativeConstantInvocationFixer;",
                        "use PhpCsFixer\\Fixer\\FunctionNotation\\FopenFlagsFixer;",
                        "use PhpCsFixer\\Fixer\\FunctionNotation\\MethodArgumentSpaceFixer;",
                        "use PhpCsFixer\\Fixer\\FunctionNotation\\NativeFunctionInvocationFixer;",
                        "use PhpCsFixer\\Fixer\\FunctionNotation\\NullableTypeDeclarationForDefaultNullValueFixer;",
                        "use PhpCsFixer\\Fixer\\FunctionNotation\\VoidReturnFixer;",
                        "use PhpCsFixer\\Fixer\\Operator\\BinaryOperatorSpacesFixer;",
                        "use PhpCsFixer\\Fixer\\Operator\\ConcatSpaceFixer;",
                        "use PhpCsFixer\\Fixer\\Operator\\OperatorLinebreakFixer;",
                        "use PhpCsFixer\\Fixer\\Phpdoc\\GeneralPhpdocAnnotationRemoveFixer;",
                        "use PhpCsFixer\\Fixer\\Phpdoc\\NoSuperfluousPhpdocTagsFixer;",
                        "use PhpCsFixer\\Fixer\\Phpdoc\\PhpdocLineSpanFixer;",
                        "use PhpCsFixer\\Fixer\\Phpdoc\\PhpdocOrderFixer;",
                        "use PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitConstructFixer;",
                        "use PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitDedicateAssertFixer;",
                        "use PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitDedicateAssertInternalTypeFixer;",
                        "use PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitMockFixer;",
                        "use PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitMockShortWillReturnFixer;",
                        "use PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitTestCaseStaticMethodCallsFixer;",
                        "use PhpCsFixer\\Fixer\\ReturnNotation\\NoUselessReturnFixer;",
                        "use PhpCsFixer\\Fixer\\Strict\\DeclareStrictTypesFixer;",
                        "use PhpCsFixer\\Fixer\\StringNotation\\SingleQuoteFixer;",
                        "use PhpCsFixer\\Fixer\\Whitespace\\BlankLineBeforeStatementFixer;",
                        "use PhpCsFixer\\Fixer\\Whitespace\\CompactNullableTypehintFixer;",
                        "use PhpCsFixerCustomFixers\\Fixer\\NoImportFromGlobalNamespaceFixer;",
                        "use PhpCsFixerCustomFixers\\Fixer\\NoSuperfluousConcatenationFixer;",
                        "use PhpCsFixerCustomFixers\\Fixer\\NoUselessCommentFixer;",
                        "use PhpCsFixerCustomFixers\\Fixer\\NoUselessParenthesisFixer;",
                        "use PhpCsFixerCustomFixers\\Fixer\\NoUselessStrlenFixer;",
                        "use PhpCsFixerCustomFixers\\Fixer\\PhpdocTypesCommaSpacesFixer;",
                        "use PhpCsFixerCustomFixers\\Fixer\\SingleSpaceAfterStatementFixer;",
                        "use Symplify\\CodingStandard\\Fixer\\Spacing\\StandaloneLineConstructorParamFixer;",
                        "use Symplify\\EasyCodingStandard\\Config\\ECSConfig;",
                        "use Symplify\\EasyCodingStandard\\ValueObject\\Option;",
                        "use Symplify\\EasyCodingStandard\\ValueObject\\Set\\SetList;",
                        "",
                        "return static function (ECSConfig $ecsConfig): void {",
                        "    $ecsConfig->sets([",
                        "        SetList::CLEAN_CODE,",
                        "        SetList::ARRAY,",
                        "        SetList::CONTROL_STRUCTURES,",
                        "        SetList::STRICT,",
                        "        SetList::PSR_12,",
                        "    ]);",
                        "",
                        "    $ecsConfig->rules([",
                        "        ModernizeTypesCastingFixer::class,",
                        "        FopenFlagsFixer::class,",
                        "        NativeConstantInvocationFixer::class,",
                        "        NullableTypeDeclarationForDefaultNullValueFixer::class,",
                        "        VoidReturnFixer::class,",
                        "        OperatorLinebreakFixer::class,",
                        "        PhpdocLineSpanFixer::class,",
                        "        PhpdocOrderFixer::class,",
                        "        PhpUnitConstructFixer::class,",
                        "        PhpUnitDedicateAssertInternalTypeFixer::class,",
                        "        PhpUnitMockFixer::class,",
                        "        PhpUnitMockShortWillReturnFixer::class,",
                        "        PhpUnitTestCaseStaticMethodCallsFixer::class,",
                        "        NoUselessReturnFixer::class,",
                        "        DeclareStrictTypesFixer::class,",
                        "        BlankLineBeforeStatementFixer::class,",
                        "        CompactNullableTypehintFixer::class,",
                        "        NoImportFromGlobalNamespaceFixer::class,",
                        "        NoSuperfluousConcatenationFixer::class,",
                        "        NoUselessCommentFixer::class,",
                        "        SingleSpaceAfterStatementFixer::class,",
                        "        NoUselessParenthesisFixer::class,",
                        "        NoUselessStrlenFixer::class,",
                        "        PhpdocTypesCommaSpacesFixer::class,",
                        "        StandaloneLineConstructorParamFixer::class,",
                        "    ]);",
                        "",
                        "    $ecsConfig->ruleWithConfiguration(HeaderCommentFixer::class, ['header' => '(c) KruseMedien GmbH <info@krusemedien.com>",
                        "For the full copyright and license information, please view the LICENSE",
                        "file that was distributed with this source code.', 'separate' => 'bottom', 'location' => 'after_declare_strict', 'comment_type' => 'comment']);",
                        "    $ecsConfig->ruleWithConfiguration(ClassAttributesSeparationFixer::class, ['elements' => ['property' => 'one', 'method' => 'one']]);",
                        "    $ecsConfig->ruleWithConfiguration(MethodArgumentSpaceFixer::class, ['on_multiline' => 'ensure_fully_multiline']);",
                        "    $ecsConfig->ruleWithConfiguration(NativeFunctionInvocationFixer::class, [",
                        "        'include' => [NativeFunctionInvocationFixer::SET_COMPILER_OPTIMIZED],",
                        "        'scope' => 'namespaced',",
                        "        'strict' => false,",
                        "    ]);",
                        "    $ecsConfig->ruleWithConfiguration(ConcatSpaceFixer::class, ['spacing' => 'one']);",
                        "    $ecsConfig->ruleWithConfiguration(GeneralPhpdocAnnotationRemoveFixer::class, ['annotations' => ['copyright', 'category']]);",
                        "    $ecsConfig->ruleWithConfiguration(NoSuperfluousPhpdocTagsFixer::class, ['allow_unused_params' => true, 'allow_mixed' => true]);",
                        "    $ecsConfig->ruleWithConfiguration(PhpUnitDedicateAssertFixer::class, ['target' => 'newest']);",
                        "    $ecsConfig->ruleWithConfiguration(SingleQuoteFixer::class, ['strings_containing_single_quote_chars' => true]);",
                        "    // workaround for https://github.com/PHP-CS-Fixer/PHP-CS-Fixer/issues/5495",
                        "    $ecsConfig->ruleWithConfiguration(BinaryOperatorSpacesFixer::class, [",
                        "        'operators' => [",
                        "            '|' => null,",
                        "            '&' => null,",
                        "        ],",
                        "    ]);",
                        "",
                        "    $parameters = $ecsConfig->parameters();",
                        "    $parameters->set(Option::CACHE_DIRECTORY, $_SERVER['SHOPWARE_TOOL_CACHE_ECS'] ?? 'var/cache/cs_fixer');",
                        "    $parameters->set(Option::CACHE_NAMESPACE, 'KrmeHerbrandBundle');",
                        "",
                        "    $ecsConfig->parallel();",
                        "",
                        "    $ecsConfig->skip([",
                        "",
                        "    ]);",
                        "};"
                    ],
                    "executable": false
                },
                "root/phpstan.neon.dist": {
                    "contents": [
                        "parameters:",
                        "    level: 8",
                        "    tmpDir: var/cache/phpstan",
                        "    inferPrivatePropertyTypeFromConstructor: true",
                        "    checkMissingIterableValueType: false",
                        "    checkGenericClassInNonGenericObjectType: false",
                        "",
                        "    excludePaths:",
                        "            - */node_modules/",
                        "",
                        "    ignoreErrors:",
                        ""
                    ],
                    "executable": false
                },
                "root/phpunit.xml.dist": {
                    "contents": [
                        "<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                        "",
                        "<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"",
                        "         xsi:noNamespaceSchemaLocation=\"http://schema.phpunit.de/9.5/phpunit.xsd\"",
                        "         bootstrap=\"tests/TestBootstrap.php\"",
                        "         cacheResult=\"false\"",
                        "         executionOrder=\"random\"",
                        "         resolveDependencies=\"true\">",
                        "",
                        "    <php>",
                        "        <ini name=\"error_reporting\" value=\"-1\"/>",
                        "        <server name=\"KERNEL_CLASS\" value=\"Shopware\\Core\\Kernel\"/>",
                        "        <server name=\"SYMFONY_DEPRECATIONS_HELPER\" value=\"weak\"/>",
                        "        <env name=\"APP_ENV\" value=\"test\"/>",
                        "        <env name=\"APP_DEBUG\" value=\"1\"/>",
                        "        <env name=\"APP_SECRET\" value=\"s$cretf0rt3st\"/>",
                        "        <env name=\"SHELL_VERBOSITY\" value=\"-1\"/>",
                        "    </php>",
                        "",
                        "    <testsuites>",
                        "        <testsuite name=\"Herbrand Bundle\">",
                        "            <directory>tests</directory>",
                        "        </testsuite>",
                        "    </testsuites>",
                        "    <coverage>",
                        "        <include>",
                        "            <directory suffix=\".php\">./</directory>",
                        "        </include>",
                        "        <exclude>",
                        "            <directory suffix=\".php\">./bin</directory>",
                        "            <directory suffix=\".php\">./tests</directory>",
                        "            <directory suffix=\".php\">./vendor</directory>",
                        "            <directory suffix=\".php\">./var</directory>",
                        "",
                        "            <file>src/KrmeHerbrandBundle.php</file>",
                        "            <file>easy-coding-standard.php</file>",
                        "            <file>rector.php</file>",
                        "            <file>vendor-builder.php</file>",
                        "        </exclude>",
                        "    </coverage>",
                        "",
                        "    <listeners>",
                        "        <listener class=\"Symfony\\Bridge\\PhpUnit\\SymfonyTestsListener\">",
                        "            <arguments>",
                        "                <array>",
                        "                    <!-- set this option to 0 to disable the DebugClassLoader integration -->",
                        "                    <element key=\"debug-class-loader\">",
                        "                        <integer>0</integer>",
                        "                    </element>",
                        "                </array>",
                        "            </arguments>",
                        "        </listener>",
                        "        <!--<listener class=\"JohnKary\\PHPUnit\\Listener\\SpeedTrapListener\"/>-->",
                        "        <!--Enable to see the db sideeffects of the tests. -->",
                        "        <!--<listener class=\"Shopware\\Core\\Framework\\Test\\TestCaseBase\\DatabaseCleanTestListener\"/>-->",
                        "        <!--Enable to see Test structure violations. (Not formatted) -->",
                        "        <!--<listener class=\"Shopware\\Core\\Framework\\Test\\TestCaseBase\\TestValidityListener\"/>-->",
                        "    </listeners>",
                        "</phpunit>",
                        ""
                    ],
                    "executable": false
                },
                "root/rector.php.dist": {
                    "contents": [
                        "<?php",
                        "// rector.php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "use Rector\\CodeQuality\\Rector\\Array_\\CallableThisArrayToAnonymousFunctionRector;",
                        "use Rector\\Php74\\Rector\\Closure\\ClosureToArrowFunctionRector;",
                        "use Rector\\Php73\\Rector\\FuncCall\\JsonThrowOnErrorRector;",
                        "use Rector\\Php74\\Rector\\LNumber\\AddLiteralSeparatorToNumberRector;",
                        "use Rector\\Symfony\\Set\\SymfonySetList;",
                        "use Rector\\Symfony\\Set\\TwigSetList;",
                        "use Rector\\Laravel\\Set\\LaravelSetList;",
                        "use Rector\\Core\\Configuration\\Option;",
                        "use Rector\\DeadCode\\Rector\\ClassMethod\\RemoveUnusedPrivateMethodRector;",
                        "use Rector\\DeadCode\\Rector\\MethodCall\\RemoveEmptyMethodCallRector;",
                        "use Rector\\DeadCode\\Rector\\Property\\RemoveSetterOnlyPropertyAndMethodCallRector;",
                        "use Rector\\DeadCode\\Rector\\Property\\RemoveUnusedPrivatePropertyRector;",
                        "use Rector\\Naming\\Rector\\Class_\\RenamePropertyToMatchTypeRector;",
                        "use Rector\\Privatization\\Rector\\ClassMethod\\PrivatizeLocalOnlyMethodRector;",
                        "use Rector\\Privatization\\Rector\\Property\\PrivatizeLocalPropertyToPrivatePropertyRector;",
                        "use Rector\\Set\\ValueObject\\SetList;",
                        "use Rector\\SOLID\\Rector\\ClassMethod\\UseInterfaceOverImplementationInConstructorRector;",
                        "use Symfony\\Component\\DependencyInjection\\Loader\\Configurator\\ContainerConfigurator;",
                        "use Rector\\DeadCode\\Rector\\StaticCall\\RemoveParentCallWithoutParentRector;",
                        "use Rector\\Privatization\\Rector\\Property\\PrivatizeFinalClassPropertyRector;",
                        "use Rector\\CodingStyle\\Rector\\ClassMethod\\RemoveDoubleUnderscoreInMethodNameRector;",
                        "use Rector\\Privatization\\Rector\\Class_\\FinalizeClassesWithoutChildrenRector;",
                        "use Rector\\Php55\\Rector\\String_\\StringClassNameToClassConstantRector;",
                        "use Rector\\Config\\RectorConfig;",
                        "use Rector\\Core\\ValueObject\\PhpVersion;",
                        "use Frosh\\Rector\\Set\\ShopwareSetList;",
                        "use Rector\\Renaming\\Rector\\Name\\RenameClassRector;",
                        "use Rector\\Renaming\\Rector\\PropertyFetch\\RenamePropertyRector;",
                        "",
                        "return static function (RectorConfig $rectorConfig): void {",
                        "    // paths to refactor; solid alternative to CLI arguments",
                        "    $rectorConfig->paths([",
                        "        __DIR__ . '/src',",
                        "    ]);",
                        "",
                        "    $rectorConfig->skip([",
                        "        __DIR__ . '/src/Entity/**/*Entity.php',",
                        "        AddLiteralSeparatorToNumberRector::class => [",
                        "            __DIR__ . '/**/*'",
                        "        ],",
                        "        PrivatizeLocalPropertyToPrivatePropertyRector::class => [",
                        "            __DIR__ . '/src/**/Struct/*.php'",
                        "        ],",
                        "        PrivatizeLocalOnlyMethodRector::class => [",
                        "            __DIR__ . '/src/**/Struct/*.php'",
                        "        ],",
                        "        PrivatizeFinalClassPropertyRector::class => [",
                        "           __DIR__ . '/src/**/Struct/*.php',",
                        "           __DIR__ . '/src/Entity/*',",
                        "        ],",
                        "        RenamePropertyToMatchTypeRector::class => [",
                        "            __DIR__ . '/src/**/*.php'",
                        "        ]",
                        "    ]);",
                        "",
                        "    $rectorConfig->sets([",
                        "        SymfonySetList::SYMFONY_52,",
                        "        SymfonySetList::SYMFONY_53,",
                        "        SymfonySetList::SYMFONY_CODE_QUALITY,",
                        "        TwigSetList::TWIG_240,",
                        "        SetList::CODE_QUALITY,",
                        "        SetList::CODING_STYLE,",
                        "        SetList::NAMING,",
                        "        SetList::DEAD_CODE,",
                        "        SetList::PHP_72,",
                        "        SetList::PHP_73,",
                        "        SetList::PHP_74,",
                        "        SetList::PHP_80,",
                        "        SetList::PHP_81,",
                        "        SetList::PSR_4,",
                        "        SetList::TYPE_DECLARATION,",
                        "        SetList::PRIVATIZATION",
                        "    ]);",
                        "",
                        "    // is your PHP version different from the one your refactor to? [default: your PHP version]",
                        "    $rectorConfig->phpVersion(PhpVersion::PHP_81);",
                        "",
                        "    $rectorConfig->symfonyContainerXml(file_exists(__DIR__ . '/../../..%ShopwareHashedCacheDir%/srcShopware_Core_KernelDevDebugContainer.xml')",
                        "        ? __DIR__ . '/../../..%ShopwareHashedCacheDir%/srcShopware_Core_KernelDevDebugContainer.xml'",
                        "        : __DIR__ . '/../../..%ShopwareHashedCacheDir%/Shopware_Core_KernelDevDebugContainer.xml'",
                        "    );",
                        "",
                        "    $rectorConfig->parallel();",
                        "};",
                        ""
                    ],
                    "executable": false
                },
                "root/sonar-project.properties": {
                    "contents": [
                        "sonar.projectKey=KrmeHerbrandBundle",
                        "",
                        "# --- optional properties ---",
                        "",
                        "# defaults to project key",
                        "sonar.projectName=KruseMedien Herbrand Bundle",
                        "# defaults to 'not provided'",
                        "sonar.projectVersion=1.0",
                        "",
                        "# Path is relative to the sonar-project.properties file. Defaults to .",
                        "sonar.sources=src",
                        "",
                        "# Encoding of the source code. Default is default system encoding",
                        "#sonar.sourceEncoding=UTF-8",
                        "",
                        "sonar.host.url=https://sonarqube.krusemedien.online",
                        "",
                        "sonar.test.inclusions=**/*.spec.js",
                        "sonar.coverage.exclusions=src/KrmeHerbrandBundle.php,src/Entities/**/*,src/Resources/app/administration/test/**/*,src/Resources/config/**/*,src/Resources/app/administration/jest.config.js,src/Resources/config/Synonyms.php,src/KlarnaPayment/**/*,src/PromotionGift/**/*",
                        "sonar.exclusions=src/Resources/app/administration/coverage/**,vendor-builder.php,tests/app/**,src/Resources/app/administration/node_modules/**,src/Migration/**,src/Resources/views/email/**",
                        ""
                    ],
                    "executable": false
                },
                "tests/TestBootstrap.php": {
                    "contents": [
                        "<?php declare(strict_types=1);",
                        "/*",
                        " * (c) KruseMedien GmbH <info@krusemedien.com>",
                        " * For the full copyright and license information, please view the LICENSE",
                        " * file that was distributed with this source code.",
                        " */",
                        "",
                        "use Shopware\\Core\\Framework\\Test\\TestCaseBase\\KernelLifecycleManager;",
                        "use Symfony\\Component\\Dotenv\\Dotenv;",
                        "",
                        "function get_project_dir(): string",
                        "{",
                        "    if (isset($_SERVER['PROJECT_ROOT']) && \\file_exists($_SERVER['PROJECT_ROOT'])) {",
                        "        return $_SERVER['PROJECT_ROOT'];",
                        "    }",
                        "    if (isset($_ENV['PROJECT_ROOT']) && \\file_exists($_ENV['PROJECT_ROOT'])) {",
                        "        return $_ENV['PROJECT_ROOT'];",
                        "    }",
                        "",
                        "    $rootDir = __DIR__;",
                        "    $dir = $rootDir;",
                        "    while (!\\file_exists($dir . '/.env')) {",
                        "        if ($dir === \\dirname($dir)) {",
                        "            return $rootDir;",
                        "        }",
                        "        $dir = \\dirname($dir);",
                        "    }",
                        "",
                        "    return $dir;",
                        "}",
                        "",
                        "\\define('TEST_PROJECT_DIR', get_project_dir());",
                        "",
                        "$loader = require TEST_PROJECT_DIR . '/vendor/autoload.php';",
                        "KernelLifecycleManager::prepare($loader);",
                        "$pluginVendorDir = __DIR__ . '/../vendor';",
                        "if (\\is_dir($pluginVendorDir)) {",
                        "    require_once $pluginVendorDir . '/autoload.php';",
                        "} else {",
                        "    echo 'vendor directory not found. Please execute \"composer dump-autoload\"';",
                        "    exit(1);",
                        "}",
                        "",
                        "if (!\\class_exists(Dotenv::class)) {",
                        "    throw new RuntimeException('APP_ENV environment variable is not defined. You need to define environment variables for configuration or add \"symfony/dotenv\" as a Composer dependency to load variables from a .env file.');",
                        "}",
                        "(new Dotenv())->load(TEST_PROJECT_DIR . '/.env');",
                        "",
                        "$dbUrl = \\getenv('DATABASE_URL');",
                        "if ($dbUrl !== false) {",
                        "    \\putenv('DATABASE_URL=' . $dbUrl . '_test');",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "tests/e2e/.babelrc": {
                    "contents": [
                        "{",
                        "    \"presets\": [",
                        "        [",
                        "            \"@babel/preset-env\",",
                        "            {",
                        "                \"targets\": {",
                        "                    \"node\": \"current\"",
                        "                }",
                        "            }",
                        "        ]",
                        "    ],",
                        "    \"plugins\": [",
                        "        \"@babel/plugin-proposal-object-rest-spread\"",
                        "    ],",
                        "    \"ignore\": [\"/node_modules\\/(?!@shopware-ag)/\"]",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "tests/e2e/.percy.yml": {
                    "contents": [
                        "version: 2",
                        "snapshot:",
                        "    widths: [320, 414, 1024, 1366, 1600]",
                        "discovery:",
                        "    disable-cache: true",
                        ""
                    ],
                    "executable": false
                },
                "tests/e2e/cypress.config.js": {
                    "contents": [
                        "const { defineConfig } = require('cypress')",
                        "",
                        "module.exports = defineConfig({",
                        "    viewportHeight: 1080,",
                        "    viewportWidth: 1920,",
                        "    watchForFileChanges: true,",
                        "    requestTimeout: 60000,",
                        "    responseTimeout: 80000,",
                        "    defaultCommandTimeout: 30000,",
                        "    nodeVersion: 'bundled',",
                        "    salesChannelName: 'Storefront',",
                        "    useDarkTheme: false,",
                        "    video: false,",
                        "    useShopwareTheme: true,",
                        "    theme: 'dark',",
                        "    screenshotsFolder: './../../var/log/e2e/screenshots',",
                        "    modifyObstructiveCode: false,",
                        "    env: {",
                        "        user: 'admin',",
                        "        pass: 'shopware',",
                        "        salesChannelName: 'Storefront',",
                        "        admin: '/admin',",
                        "        apiPath: 'api',",
                        "        locale: 'de-DE',",
                        "        shopwareRoot: '/app',",
                        "        localUsage: false,",
                        "        usePercy: false,",
                        "        minAuthTokenLifetime: 60,",
                        "        acceptLanguage: 'de-DE,en;q=0.5',",
                        "        dbUser: 'root',",
                        "        dbPassword: 'root',",
                        "        dbHost: 'mysql',",
                        "        dbName: 'shopware_e2e',",
                        "        expectedVersion: '6.4.',",
                        "        grepOmitFiltered: true,",
                        "        grepFilterSpecs: true,",
                        "    },",
                        "    retries: {",
                        "        runMode: 2,",
                        "        openMode: 0,",
                        "    },",
                        "    reporter: 'cypress-multi-reporters',",
                        "    reporterOptions: {",
                        "        reporterEnabled: 'mochawesome, mocha-junit-reporter',",
                        "        mochawesomeReporterOptions: {",
                        "            reportDir: './../../var/log/e2e/results/mocha',",
                        "            quite: true,",
                        "            overwrite: false,",
                        "            html: false,",
                        "            json: true,",
                        "        },",
                        "        mochaJunitReporterReporterOptions: {",
                        "            mochaFile:",
                        "                './../../var/log/e2e/results/single-reports/results-[hash].junit.xml',",
                        "        },",
                        "    },",
                        "    e2e: {",
                        "        // We've imported your old cypress plugins here.",
                        "        // You may want to clean this up later by importing these.",
                        "        setupNodeEvents(on, config) {",
                        "            return require('./cypress/plugins/index.js')(on, config)",
                        "        },",
                        "        baseUrl: 'http://localhost',",
                        "    },",
                        "})"
                    ],
                    "executable": false
                },
                "tests/e2e/cypress/e2e/.gitkeep": {
                    "contents": [
                        ""
                    ],
                    "executable": false
                },
                "tests/e2e/cypress/fixtures/.gitkeep": {
                    "contents": [
                        ""
                    ],
                    "executable": false
                },
                "tests/e2e/cypress/plugins/index.js": {
                    "contents": [
                        "/* eslint-disable */",
                        "",
                        "// ***********************************************************",
                        "// This example plugins/index.js can be used to load plugins",
                        "//",
                        "// You can change the location of this file or turn off loading",
                        "// the plugins file with the 'pluginsFile' configuration option.",
                        "//",
                        "// You can read more here:",
                        "// https://on.cypress.io/plugins-guide",
                        "// ***********************************************************",
                        "",
                        "// This function is called when a project is opened or re-opened (e.g. due to",
                        "// the project's config changing)",
                        "",
                        "const axios = require('axios');",
                        "require('@babel/register');",
                        "",
                        "// TODO Check incompatibility and reintegrate as soon as possible",
                        "// const logToOutput = require('cypress-log-to-output');",
                        "",
                        "module.exports = (on, config) => {",
                        "    // logToOutput.install(on);",
                        "",
                        "    // `on` is used to hook into various events Cypress emits",
                        "    on('before:browser:launch', () => {",
                        "        config.env.projectRoot = config.env.projectRoot || config.env.shopwareRoot;",
                        "    });",
                        "",
                        "    return config;",
                        "};"
                    ],
                    "executable": false
                },
                "tests/e2e/cypress/support/commands.js": {
                    "contents": [
                        "// ***********************************************",
                        "// This example commands.js shows you how to",
                        "// create various custom commands and overwrite",
                        "// existing commands.",
                        "//",
                        "// For more comprehensive examples of custom",
                        "// commands please read more here:",
                        "// https://on.cypress.io/custom-commands",
                        "// ***********************************************",
                        "//",
                        "//",
                        "// -- This is a parent command --",
                        "// Cypress.Commands.add(\"login\", (email, password) => { ... })",
                        "//",
                        "//",
                        "// -- This is a child command --",
                        "// Cypress.Commands.add(\"drag\", { prevSubject: 'element'}, (subject, options) => { ... })",
                        "//",
                        "//",
                        "// -- This is a dual command --",
                        "// Cypress.Commands.add(\"dismiss\", { prevSubject: 'optional'}, (subject, options) => { ... })",
                        "//",
                        "//",
                        "// -- This is will overwrite an existing command --",
                        "// Cypress.Commands.overwrite(\"visit\", (originalFn, url, options) => { ... })",
                        "",
                        "import '@percy/cypress';",
                        "",
                        "const uuid = require('uuid/v4');",
                        "const AdminApiService = require('@shopware-ag/e2e-testsuite-platform/cypress/support/service/administration/admin-api.service.js');",
                        "",
                        "/**",
                        " * Switches administration UI locale to EN_GB",
                        " * @memberOf Cypress.Chainable#",
                        " * @name setLocaleToEnGb",
                        " * @function",
                        " */",
                        "Cypress.Commands.add('setLocaleToEnGb', () => {",
                        "    return cy.window().then((win) => {",
                        "        win.localStorage.setItem('sw-admin-locale', Cypress.env('locale'));",
                        "    });",
                        "});",
                        "",
                        "/**",
                        " * Cleans up any previous state by restoring database and clearing caches",
                        " * @memberOf Cypress.Chainable#",
                        " * @name openInitialPage",
                        " * @function",
                        " */",
                        "Cypress.Commands.add('openInitialPage', (url) => {",
                        "    // Request we want to wait for later",
                        "",
                        "    cy.intercept('/api/_info/me').as('meCall');",
                        "",
                        "",
                        "    cy.visit(url);",
                        "    cy.wait('@meCall').then(() => {",
                        "        cy.get('.sw-desktop').should('be.visible');",
                        "    });",
                        "});",
                        "",
                        "/**",
                        " * Authenticate towards the Shopware API",
                        " * @memberOf Cypress.Chainable#",
                        " * @name authenticate",
                        " * @function",
                        " */",
                        "Cypress.Commands.add('authenticate', () => {",
                        "    return cy.request(",
                        "        'POST',",
                        "        '/api/oauth/token',",
                        "        {",
                        "            grant_type: Cypress.env('grant') ? Cypress.env('grant') : 'password',",
                        "            client_id: Cypress.env('client_id') ? Cypress.env('client_id') : 'administration',",
                        "            scopes: Cypress.env('scope') ? Cypress.env('scope') : 'write',",
                        "            username: Cypress.env('username') ? Cypress.env('user') : 'admin',",
                        "            password: Cypress.env('password') ? Cypress.env('pass') : 'shopware'",
                        "        }",
                        "    ).then((responseData) => {",
                        "        return {",
                        "            access: responseData.body.access_token,",
                        "            refresh: responseData.body.refresh_token,",
                        "            expiry: Math.round(+new Date() / 1000) + responseData.body.expires_in",
                        "        };",
                        "    });",
                        "});",
                        "",
                        "/**",
                        " * Click context menu in order to cause a desired action",
                        " * @memberOf Cypress.Chainable#",
                        " * @name clickContextMenuItem",
                        " * @function",
                        " * @param {String} menuButtonSelector - The message to look for",
                        " * @param {String} menuOpenSelector - The message to look for",
                        " * @param {Object} [scope=null] - Options concerning the notification",
                        " */",
                        "Cypress.Commands.add('clickContextMenuItem', (menuButtonSelector, menuOpenSelector, scope = null) => {",
                        "    const contextMenuCssSelector = '.sw-context-menu';",
                        "    const activeContextButtonCssSelector = '.is--active';",
                        "",
                        "    if (scope != null) {",
                        "        cy.get(scope).should('be.visible');",
                        "        cy.get(`${scope} ${menuOpenSelector}`).click({force: true});",
                        "",
                        "        if (scope.includes('row')) {",
                        "            cy.get(`${menuOpenSelector}${activeContextButtonCssSelector}`).should('be.visible');",
                        "        }",
                        "    } else {",
                        "        cy.get(menuOpenSelector).should('be.visible').click({force: true});",
                        "    }",
                        "",
                        "    cy.get(contextMenuCssSelector).should('be.visible');",
                        "    cy.get(menuButtonSelector).click();",
                        "    cy.get(contextMenuCssSelector).should('not.exist');",
                        "});",
                        "",
                        "Cypress.Commands.add('installPlugin', (pluginName) => {",
                        "",
                        "    return cy.authenticate().then((result) => {",
                        "        const requestConfig = {",
                        "            headers: {",
                        "                Accept: 'application/vnd.api+json',",
                        "                Authorization: `Bearer ${result.access}`,",
                        "                'Content-Type': 'application/json'",
                        "            },",
                        "            method: 'POST',",
                        "            url: `/api/_action/extension/install/plugin/${pluginName}`,",
                        "            qs: {",
                        "                response: true,",
                        "                pluginName: pluginName,",
                        "            },",
                        "            body: {}",
                        "        };",
                        "",
                        "        return cy.request(requestConfig);",
                        "    });",
                        "});",
                        "",
                        "Cypress.Commands.add('activatePlugin', (pluginName) => {",
                        "",
                        "    return cy.authenticate().then((result) => {",
                        "        const requestConfig = {",
                        "            headers: {",
                        "                Accept: 'application/vnd.api+json',",
                        "                Authorization: `Bearer ${result.access}`,",
                        "                'Content-Type': 'application/json'",
                        "            },",
                        "            method: 'PUT',",
                        "            url: `/api/_action/extension/activate/plugin/${pluginName}`,",
                        "            qs: {",
                        "                response: true,",
                        "                pluginName: pluginName,",
                        "            },",
                        "            body: {}",
                        "        };",
                        "",
                        "        return cy.request(requestConfig);",
                        "    });",
                        "});",
                        "",
                        "Cypress.Commands.add('changeTheme', (themeName, salesChannel = 'Storefront') => {",
                        "",
                        "    let themeId, salesChannelId;",
                        "",
                        "    return cy.searchViaAdminApi({",
                        "        endpoint: 'sales-channel',",
                        "        data: {",
                        "            field: 'name',",
                        "            value: salesChannel",
                        "        }",
                        "    }).then((salesChannelObject) => {",
                        "        salesChannelId = salesChannelObject.id;",
                        "        cy.searchViaAdminApi({",
                        "            data: {",
                        "                field: 'technicalName',",
                        "                value: themeName",
                        "            },",
                        "            endpoint: 'theme'",
                        "        })",
                        "    }).then((theme) => {",
                        "        themeId = theme.id;",
                        "        cy.authenticate();",
                        "    }).then((auth) => {",
                        "        return cy.request({",
                        "            headers: {",
                        "                Accept: 'application/vnd.api+json',",
                        "                Authorization: `Bearer ${auth.access}`,",
                        "                'Content-Type': 'application/json'",
                        "            },",
                        "            method: 'POST',",
                        "            url: 'api/_action/theme/' + themeId + '/assign/' + salesChannelId,",
                        "            qs: {",
                        "                response: true",
                        "            },",
                        "            body: {}",
                        "        });",
                        "    });",
                        "});",
                        "",
                        "",
                        "Cypress.Commands.add('resetTheme', (themeName) => {",
                        "",
                        "    let themeId, salesChannelId, accessToken;",
                        "    const pluginName = themeName;",
                        "",
                        "    cy.authenticate().then((auth) => {",
                        "        accessToken = auth.access;",
                        "        cy.searchViaAdminApi({",
                        "            endpoint: 'sales-channel',",
                        "            data: {",
                        "                field: 'name',",
                        "                value: 'Raiffeisen-Markt'",
                        "            }",
                        "        });",
                        "    }).then((salesChannelObject) => {",
                        "        salesChannelId = salesChannelObject.id;",
                        "        const requestConfig = {",
                        "            headers: {",
                        "                Accept: 'application/vnd.api+json',",
                        "                Authorization: `Bearer ${accessToken}`,",
                        "                'Content-Type': 'application/json'",
                        "            },",
                        "            method: 'POST',",
                        "            url: `/api/_action/extension/install/plugin/${pluginName}`,",
                        "            qs: {",
                        "                response: true,",
                        "                pluginName: pluginName,",
                        "            },",
                        "            body: {}",
                        "        };",
                        "",
                        "        return cy.request(requestConfig);",
                        "    }).then(() => {",
                        "        const requestConfig = {",
                        "            headers: {",
                        "                Accept: 'application/vnd.api+json',",
                        "                Authorization: `Bearer ${accessToken}`,",
                        "                'Content-Type': 'application/json'",
                        "            },",
                        "            method: 'PUT',",
                        "            url: `/api/_action/extension/activate/plugin/${pluginName}`,",
                        "            qs: {",
                        "                response: true,",
                        "                pluginName: pluginName,",
                        "            },",
                        "            body: {}",
                        "        };",
                        "",
                        "        return cy.request(requestConfig);",
                        "    }).then(() => {",
                        "        cy.searchViaAdminApi({",
                        "            data: {",
                        "                field: 'technicalName',",
                        "                value: 'AgravisMarkets'",
                        "            },",
                        "            endpoint: 'theme'",
                        "        })",
                        "    }).then((theme) => {",
                        "        themeId = theme.id;",
                        "        cy.request({",
                        "            headers: {",
                        "                Accept: 'application/vnd.api+json',",
                        "                Authorization: `Bearer ${accessToken}`,",
                        "                'Content-Type': 'application/json'",
                        "            },",
                        "            method: 'POST',",
                        "            url: 'api/_action/theme/' + themeId + '/assign/' + salesChannelId,",
                        "            qs: {",
                        "                response: true",
                        "            },",
                        "            body: {}",
                        "        });",
                        "    });",
                        "});",
                        "",
                        "Cypress.Commands.add('addProduct', (productName) => {",
                        "",
                        "    let taxId, currencyId;",
                        "",
                        "    cy.createDefaultFixture('tax').then(() => {",
                        "        cy.searchViaAdminApi({",
                        "            data: {",
                        "                field: 'name',",
                        "                value: 'Standard rate'",
                        "            },",
                        "            endpoint: 'tax'",
                        "        })",
                        "    }).then(tax => {",
                        "        taxId = tax.id;",
                        "",
                        "        cy.searchViaAdminApi({",
                        "            data: {",
                        "                field: 'name',",
                        "                value: 'Euro'",
                        "            },",
                        "            endpoint: 'currency'",
                        "        })",
                        "    }).then(currency => {",
                        "        currencyId = currency.id;",
                        "",
                        "        cy.authenticate();",
                        "    }).then(auth => {",
                        "        let products = [];",
                        "        products.push(",
                        "            {",
                        "                name: productName,",
                        "                stock: 10,",
                        "                productNumber: uuid().replace(/-/g, ''),",
                        "                taxId: taxId,",
                        "                price: [",
                        "                    {",
                        "                        currencyId: currencyId,",
                        "                        net: 42,",
                        "                        linked: false,",
                        "                        gross: 64",
                        "                    }",
                        "                ]",
                        "            }",
                        "        );",
                        "        return cy.request({",
                        "            headers: {",
                        "                Accept: 'application/vnd.api+json',",
                        "                Authorization: `Bearer ${auth.access}`,",
                        "                'Content-Type': 'application/json'",
                        "            },",
                        "            method: 'POST',",
                        "            url: '/api/_action/sync',",
                        "            qs: {",
                        "                response: true",
                        "            },",
                        "            body: {",
                        "                'write-product': {",
                        "                    'entity': 'product',",
                        "                    'action': 'upsert',",
                        "                    'payload': products",
                        "                }",
                        "",
                        "            }",
                        "        })",
                        "    })",
                        "});",
                        "",
                        "Cypress.Commands.add('createStoreLocatorFixture', (storeLocatorData) => {",
                        "    let countryId, countryStateId, salesChannelId, storeLocatorJson, storeLocatorRawData;",
                        "",
                        "    cy.fixture('store').then((result) => {",
                        "        storeLocatorJson = Cypress._.merge(result, storeLocatorData);",
                        "",
                        "        return cy.searchViaAdminApi({",
                        "            endpoint: 'sales-channel',",
                        "            data: {",
                        "                field: 'name',",
                        "                value: 'Raiffeisen-Markt'",
                        "            }",
                        "        });",
                        "    }).then((result) => {",
                        "        salesChannelId = result.id;",
                        "",
                        "        return cy.searchViaAdminApi({",
                        "            data: {",
                        "                field: 'iso',",
                        "                value: 'DE'",
                        "            },",
                        "            endpoint: 'country'",
                        "        });",
                        "    }).then((result) => {",
                        "        countryId = result.id",
                        "",
                        "        return cy.searchViaAdminApi({",
                        "            data: {",
                        "                field: 'shortCode',",
                        "                value: 'DE-NW'",
                        "            },",
                        "            endpoint: 'country-state'",
                        "        });",
                        "    }).then((result) => {",
                        "        countryStateId = result.id",
                        "",
                        "        return cy.getRandomMedia();",
                        "    }).then((result) => {",
                        "        storeLocatorRawData = Cypress._.merge(storeLocatorJson, {",
                        "            id: uuid().replace(/-/g, ''),",
                        "            countryId: countryId,",
                        "            countryStateId: countryStateId,",
                        "            pictureMediaId: result[0].id,",
                        "            salesChannels: [{",
                        "                id: salesChannelId",
                        "            }]",
                        "        });",
                        "",
                        "        return cy.createViaAdminApi({",
                        "            data: storeLocatorRawData,",
                        "            endpoint: 'neti-store-locator'",
                        "        });",
                        "    }).then(() => {",
                        "        return storeLocatorRawData",
                        "    })",
                        "})",
                        "",
                        "Cypress.Commands.add('isNotInViewport', element => {",
                        "    cy.get(element).then($el => {",
                        "        const bottom = Cypress.$(cy.state('window')).height()",
                        "        const rect = $el[0].getBoundingClientRect()",
                        "        expect(rect.top).to.be.greaterThan(bottom)",
                        "        expect(rect.bottom).to.be.greaterThan(bottom)",
                        "        expect(rect.top).to.be.greaterThan(bottom)",
                        "        expect(rect.bottom).to.be.greaterThan(bottom)",
                        "    })",
                        "});",
                        "",
                        "Cypress.Commands.add('isInViewport', element => {",
                        "    cy.get(element).then($el => {",
                        "        const bottom = Cypress.$(cy.state('window')).height()",
                        "        const rect = $el[0].getBoundingClientRect()",
                        "        expect(rect.top).not.to.be.greaterThan(bottom)",
                        "        expect(rect.bottom).not.to.be.greaterThan(bottom)",
                        "        expect(rect.top).not.to.be.greaterThan(bottom)",
                        "        expect(rect.bottom).not.to.be.greaterThan(bottom)",
                        "    })",
                        "});",
                        "",
                        "/**",
                        " * Returns random product with id, name and url to view product",
                        " * @memberOf Cypress.Chainable#",
                        " * @name getRandomProductInformationForCheckout",
                        " * @function",
                        " */",
                        "Cypress.Commands.add('getRandomProduct', () => {",
                        "    return cy.storefrontApiRequest('GET', 'product', {}, {}).then((result) => {",
                        "        return result.body.elements[0];",
                        "    });",
                        "});",
                        "",
                        "/**",
                        " * Returns random product with id, name and url to view product",
                        " * @memberOf Cypress.Chainable#",
                        " * @name getRandomProductInformationForCheckout",
                        " * @function",
                        " */",
                        "Cypress.Commands.add('getRandomMedia', () => {",
                        "    const apiClient = new AdminApiService(process.env.APP_URL)",
                        "    return apiClient.post(`/search/media?response=true`, {",
                        "        limit: 10,",
                        "        associations: {",
                        "            \"pixelboxxMedia\": { }",
                        "        },",
                        "        filter: [{",
                        "            field: 'pixelboxxMedia.pixelboxxId',",
                        "            type: 'contains',",
                        "            value: 'pboxx'",
                        "        }]",
                        "    }, { limit: 10 }).then((response) => {",
                        "        return response;",
                        "    });",
                        "});",
                        "",
                        "Cypress.Commands.add('getApiVersion', () => {",
                        "    cy.authenticate().then((auth) => {",
                        "        return cy.request({",
                        "            headers: {",
                        "                Accept: 'application/vnd.api+json',",
                        "                Authorization: `Bearer ${auth.access}`,",
                        "                'Content-Type': 'application/json'",
                        "            },",
                        "            method: 'GET',",
                        "            url: '/api/_info/version',",
                        "            qs: {",
                        "                response: true",
                        "            },",
                        "            body: {}",
                        "        });",
                        "    });",
                        "})"
                    ],
                    "executable": false
                },
                "tests/e2e/cypress/support/commands/commands.js": {
                    "contents": [
                        "require('@percy/cypress');",
                        "",
                        "const { v4: uuid } = require('uuid');",
                        "",
                        "/**",
                        " * Takes a snapshot for percy visual testing",
                        " * @memberOf Cypress.Chainable#",
                        " * @name takeSnapshot",
                        " * @param {String} title - Title of the screenshot",
                        " * @param {String} [selectorToCheck = null] - Unique selector to make sure the module is ready for being snapshot",
                        " * @param {Object} [width = null] - Screen width used for snapshot",
                        " * @param {Object} [percyCSS = null] - Add custom styling to snapshot",
                        " * @function",
                        " */",
                        "Cypress.Commands.add('takeSnapshot', (title, selectorToCheck = null, width = null, percyCSS = null) => {",
                        "    if (!Cypress.env('usePercy')) {",
                        "        return;",
                        "    }",
                        "",
                        "    if (selectorToCheck) {",
                        "        cy.get('.sw-loader').should('not.exist');",
                        "        cy.get('.sw-loader__element').should('not.exist');",
                        "        cy.get(selectorToCheck).should('be.visible');",
                        "    }",
                        "",
                        "    let options = {};",
                        "    if (width) {",
                        "        Object.assign(options, width);",
                        "    }",
                        "",
                        "    if (percyCSS) {",
                        "        Object.assign(options, percyCSS);",
                        "    }",
                        "",
                        "    cy.percySnapshot(title, options);",
                        "});",
                        "",
                        "/**",
                        " * Creates a variant product based on given fixtures \"product-variants.json\", 'tax,json\" and \"property.json\"",
                        " * with minor customisation",
                        " * @memberOf Cypress.Chainable#",
                        " * @name createStorefrontProductVariantFixture",
                        " * @function",
                        " * @param {String} [salesChannelName=Storefront] - The name of the sales channel for visibility",
                        " */",
                        "Cypress.Commands.add('createStorefrontProductVariantFixture', () => {",
                        "    return cy.createDefaultFixture('tax', {",
                        "        id: '91b5324352dc4ee58ec320df5dcf2bf4',",
                        "    }).then(() => {",
                        "        return cy.createPropertyFixture({",
                        "            options: [{",
                        "                id: '15532b3fd3ea4c1dbef6e9e9816e0715',",
                        "                name: 'Red',",
                        "            }, {",
                        "                id: '98432def39fc4624b33213a56b8c944f',",
                        "                name: 'Green',",
                        "            }],",
                        "        });",
                        "    }).then(() => {",
                        "        return cy.createPropertyFixture({",
                        "            name: 'Size',",
                        "            options: [{ name: 'S' }, { name: 'M' }, { name: 'L' }],",
                        "        });",
                        "    }).then(() => {",
                        "        cy.createDefaultFixture('product', {}, 'product-variants-storefront.json');",
                        "    });",
                        "});",
                        "",
                        "/**",
                        " * Create customer fixture using Shopware API at the given endpoint, tailored for Storefront",
                        " * @memberOf Cypress.Chainable#",
                        " * @name createCustomerFixtureStorefront",
                        " * @function",
                        " * @param {Object} userData - Options concerning creation",
                        " */",
                        "Cypress.Commands.add('createCustomerFixtureStorefront', (userData) => {",
                        "    const addressId = uuid().replace(/-/g, '');",
                        "    const customerId = uuid().replace(/-/g, '');",
                        "    let customerJson = {};",
                        "    let customerAddressJson = {};",
                        "    let finalAddressRawData = {};",
                        "    let countryId = '';",
                        "    let groupId = '';",
                        "    let paymentId = '';",
                        "    let salesChannelId = '';",
                        "    let salutationId = '';",
                        "",
                        "    return cy.fixture('customer').then((result) => {",
                        "        customerJson = Cypress._.merge(result, userData);",
                        "",
                        "        return cy.fixture('customer-address')",
                        "    }).then((result) => {",
                        "        customerAddressJson = result;",
                        "",
                        "        return cy.searchViaAdminApi({",
                        "            endpoint: 'country',",
                        "            data: {",
                        "                field: 'iso',",
                        "                value: 'DE'",
                        "            }",
                        "        });",
                        "    }).then((result) => {",
                        "        countryId = result.id;",
                        "",
                        "        return cy.searchViaAdminApi({",
                        "            endpoint: 'payment-method',",
                        "            data: {",
                        "                field: 'name',",
                        "                value: 'Invoice'",
                        "            }",
                        "        });",
                        "    }).then((result) => {",
                        "        paymentId = result.id;",
                        "",
                        "        return cy.searchViaAdminApi({",
                        "            endpoint: 'sales-channel',",
                        "            data: {",
                        "                field: 'name',",
                        "                value: 'Storefront'",
                        "            }",
                        "        });",
                        "    }).then((result) => {",
                        "        salesChannelId = result.id;",
                        "",
                        "        return cy.searchViaAdminApi({",
                        "            endpoint: 'customer-group',",
                        "            data: {",
                        "                field: 'name',",
                        "                value: 'Standard customer group'",
                        "            }",
                        "        });",
                        "    }).then((result) => {",
                        "        groupId = result.id;",
                        "",
                        "        return cy.searchViaAdminApi({",
                        "            endpoint: 'salutation',",
                        "            data: {",
                        "                field: 'displayName',",
                        "                value: 'Mr.'",
                        "            }",
                        "        });",
                        "    }).then((salutation) => {",
                        "        salutationId = salutation.id;",
                        "",
                        "        let first = true;",
                        "        finalAddressRawData = {",
                        "            addresses: customerAddressJson.addresses.map((a) => {",
                        "                let addrId;;",
                        "                if (first) {",
                        "                    addrId = addressId;",
                        "                    first = false;",
                        "                } else {",
                        "                    addrId = uuid().replace(/-/g, '');",
                        "                }",
                        "                cy.log(a.firstName)",
                        "                return Cypress._.merge({",
                        "                    customerId: customerId,",
                        "                    salutationId: salutationId,",
                        "                    id: addrId,",
                        "                    countryId: countryId",
                        "                }, a)",
                        "            })",
                        "        };",
                        "    }).then(() => {",
                        "        return Cypress._.merge(customerJson, {",
                        "            salutationId: salutationId,",
                        "            defaultPaymentMethodId: paymentId,",
                        "            salesChannelId: salesChannelId,",
                        "            groupId: groupId,",
                        "            defaultBillingAddressId: addressId,",
                        "            defaultShippingAddressId: addressId",
                        "        });",
                        "    }).then((result) => {",
                        "        return Cypress._.merge(result, finalAddressRawData);",
                        "    }).then((result) => {",
                        "        return cy.requestAdminApiStorefront({",
                        "            endpoint: 'customer',",
                        "            data: result",
                        "        });",
                        "    });",
                        "});",
                        "",
                        "/**",
                        " * Returns default sales channel for products",
                        " * @memberOf Cypress.Chainable#",
                        " * @name setSalesChannel",
                        " * @function",
                        " * @param {String} salesChannel - Title of the sales channel",
                        " */",
                        "Cypress.Commands.add('setSalesChannel', (salesChannel) => {",
                        "    cy.intercept({",
                        "        url: `**/${Cypress.env('apiPath')}/_action/system-config/batch`,",
                        "        method: 'POST'",
                        "    }).as('saveData');",
                        "    cy.intercept({",
                        "        url: `**/${Cypress.env('apiPath')}/search/sales-channel`,",
                        "        method: 'POST'",
                        "    }).as('sales-channel');",
                        "",
                        "    cy.wait('@sales-channel').its('response.statusCode').should('equal', 200);",
                        "    cy.get('.sw-select-selection-list').then(($body) => {",
                        "        if ($body.text().includes(salesChannel)) {",
                        "            cy.get('.sw-settings-listing__save-action').click();",
                        "        } else {",
                        "            cy.get('.sw-select-selection-list__input').should('be.visible').type(salesChannel);",
                        "            cy.wait('@sales-channel').its('response.statusCode').should('equal', 200);",
                        "            cy.contains('.sw-select-option--0.sw-select-result', salesChannel).should('be.visible').click({ force:true });",
                        "            cy.wait('@sales-channel').its('response.statusCode').should('equal', 200);",
                        "            cy.get('.sw-settings-listing__save-action').should('be.visible').click();",
                        "        }",
                        "    });",
                        "    cy.get('.sw-loader').should('not.exist');",
                        "    cy.wait('@saveData').its('response.statusCode').should('equal', 204);",
                        "    cy.contains('.sw-select-selection-list', salesChannel).should('be.visible');",
                        "});",
                        "",
                        "/**",
                        " * Returns default settings for shipping method",
                        " * @memberOf Cypress.Chainable#",
                        " * @name setShippingMethod",
                        " * @function",
                        " * @param {String} shippingMethod - Title of the shipping method",
                        " * @param {String} gross - Title of the gross price",
                        " * @param {String} net - Title of the net price",
                        " */",
                        "Cypress.Commands.add('setShippingMethod', (shippingMethod, gross, net) => {",
                        "    cy.intercept({",
                        "        url: `**/${Cypress.env('apiPath')}/search/shipping-method`,",
                        "        method: 'POST'",
                        "    }).as('set-shipping');",
                        "",
                        "    cy.contains(shippingMethod).should('be.visible').click();",
                        "    cy.get('.sw-settings-shipping-detail__condition_container').scrollIntoView();",
                        "    cy.get('.sw-settings-shipping-detail__top-rule').typeSingleSelectAndCheck(",
                        "        'Always valid (Default)',",
                        "        '.sw-settings-shipping-detail__top-rule'",
                        "    );",
                        "    cy.get('.sw-settings-shipping-price-matrix').scrollIntoView();",
                        "    cy.get('.sw-data-grid__cell--price-EUR .sw-field--small:nth-of-type(1) [type]').clearTypeAndCheck(gross);",
                        "    cy.get('.sw-data-grid__cell--price-EUR .sw-field--small:nth-of-type(2) [type]').clearTypeAndCheck(net);",
                        "    cy.get('.sw-settings-shipping-method-detail__save-action').should('be.visible').click();",
                        "    cy.wait('@set-shipping').its('response.statusCode').should('equal', 200);",
                        "});",
                        "",
                        "/**",
                        " * Returns default settings for payment method",
                        " * @memberOf Cypress.Chainable#",
                        " * @name setPaymentMethod",
                        " * @function",
                        " * @param {String} paymentMethod - Title of the payment method",
                        " */",
                        "Cypress.Commands.add('setPaymentMethod', (paymentMethod) => {",
                        "    cy.intercept({",
                        "        url: `**/${Cypress.env('apiPath')}/search/payment-method`,",
                        "        method: 'POST'",
                        "    }).as('set-payment');",
                        "",
                        "    cy.contains(paymentMethod).should('be.visible').click();",
                        "    cy.get('.sw-settings-payment-detail__condition_container').scrollIntoView();",
                        "    cy.get('.sw-settings-payment-detail__field-availability-rule').typeSingleSelectAndCheck(",
                        "        'Always valid (Default)',",
                        "        '.sw-settings-payment-detail__field-availability-rule'",
                        "    );",
                        "    cy.get('.sw-payment-detail__save-action').should('be.visible').click();",
                        "    cy.wait('@set-payment').its('response.statusCode').should('equal', 200);",
                        "});",
                        "",
                        "/**",
                        " * Returns country (selects and assign as default) for sales channel",
                        " * @memberOf Cypress.Chainable#",
                        " * @name selectCountryForSalesChannel",
                        " * @function",
                        " * @param {String} country - Title of the country",
                        " */",
                        "Cypress.Commands.add('selectCountryForSalesChannel', (country) => {",
                        "    cy.intercept({",
                        "        url: `**/${Cypress.env('apiPath')}/search/sales-channel`,",
                        "        method: 'POST'",
                        "    }).as('sales-channel');",
                        "    cy.intercept({",
                        "        url: `**/${Cypress.env('apiPath')}/search/country`,",
                        "        method: 'POST'",
                        "    }).as('country');",
                        "",
                        "    cy.get('.sw-sales-channel-detail__select-countries').then(($body) => {",
                        "        if (!$body.text().includes(country)) {",
                        "            cy.get('.sw-sales-channel-detail__select-countries .sw-select-selection-list__input').should('be.visible').type(country);",
                        "            cy.wait('@country').its('response.statusCode').should('equal', 200);",
                        "            cy.get('.sw-select-result-list__content').should('have.length', 1);",
                        "            cy.get('.sw-select-result-list__content').contains(country).should('be.visible').click({ force:true });",
                        "            cy.wait('@country').its('response.statusCode').should('equal', 200);",
                        "        }",
                        "    });",
                        "    cy.get('.sw-sales-channel-detail__assign-countries').then(($body) => {",
                        "        if (!$body.text().includes(country)) {",
                        "            cy.get('.sw-sales-channel-detail__assign-countries').should('be.visible').type(country);",
                        "            cy.wait('@country').its('response.statusCode').should('equal', 200);",
                        "            cy.get('.sw-select-result').should('have.length', 1);",
                        "            cy.contains('.sw-select-result', country).should('be.visible').click({ force:true });",
                        "        }",
                        "    });",
                        "    cy.get('.sw-sales-channel-detail__save-action').should('be.visible').click();",
                        "    cy.wait('@sales-channel').its('response.statusCode').should('equal', 200);",
                        "    cy.get('.sw-skeleton').should('not.exist');",
                        "    cy.get('.sw-loader').should('not.exist');",
                        "    cy.contains('.sw-sales-channel-detail__select-countries', country).should('be.visible');",
                        "    cy.contains('.sw-sales-channel-detail__assign-countries', country).should('be.visible');",
                        "});",
                        "",
                        "/**",
                        " * Returns payment method (selects and assign as default) for sales channel",
                        " * @memberOf Cypress.Chainable#",
                        " * @name selectPaymentMethodForSalesChannel",
                        " * @function",
                        " * @param {String} paymentMethod - Title of the payment method",
                        " */",
                        "Cypress.Commands.add('selectPaymentMethodForSalesChannel', (paymentMethod) => {",
                        "    cy.intercept({",
                        "        url: `**/${Cypress.env('apiPath')}/search/sales-channel`,",
                        "        method: 'POST'",
                        "    }).as('sales-channel');",
                        "    cy.intercept('POST', `**/${Cypress.env('apiPath')}/search/payment-method`, (req) => {",
                        "        const { body } = req",
                        "        if (body.hasOwnProperty('term') && body.term === paymentMethod) {",
                        "            req.alias = 'payment-method-search-for';",
                        "        } else {",
                        "            req.alias = 'payment-method'",
                        "        }",
                        "    });",
                        "    cy.get('.sw-sales-channel-detail__select-payment-methods').scrollIntoView();",
                        "    cy.get('.sw-sales-channel-detail__select-payment-methods').then(($body) => {",
                        "        if (!$body.text().includes(paymentMethod)) {",
                        "            cy.get('.sw-sales-channel-detail__select-payment-methods .sw-select-selection-list__input').should('be.visible')",
                        "                .type(paymentMethod);",
                        "            cy.wait('@payment-method-search-for').its('response.statusCode').should('equal', 200);",
                        "            cy.get('.sw-select-result-list__content').should('have.length', 1);",
                        "            cy.get('.sw-select-result-list__content').contains(paymentMethod).should('be.visible').click({ force:true });",
                        "            cy.wait('@payment-method').its('response.statusCode').should('equal', 200);",
                        "        }",
                        "    });",
                        "    cy.get('.sw-sales-channel-detail__assign-payment-methods').type(paymentMethod).should('be.visible');",
                        "    cy.wait('@payment-method').its('response.statusCode').should('equal', 200);",
                        "    cy.get('.sw-select-result').should('have.length', 1);",
                        "    cy.contains('.sw-select-result', paymentMethod).should('be.visible').click({ force:true });",
                        "    cy.get('.sw-sales-channel-detail__save-action').should('be.visible').click();",
                        "    cy.wait('@sales-channel').its('response.statusCode').should('equal', 200);",
                        "    cy.get('.sw-skeleton').should('not.exist');",
                        "    cy.get('.sw-loader').should('not.exist');",
                        "    cy.get('.sw-sales-channel-detail__select-payment-methods').scrollIntoView();",
                        "    cy.contains('.sw-sales-channel-detail__select-payment-methods', paymentMethod).should('be.visible');",
                        "    cy.contains('.sw-sales-channel-detail__assign-payment-methods', paymentMethod).should('be.visible');",
                        "});",
                        "",
                        "/**",
                        " * Returns shipping method (selects and assign as default) for sales channel",
                        " * @memberOf Cypress.Chainable#",
                        " * @name selectShippingMethodForSalesChannel",
                        " * @function",
                        " * @param {String} shippingMethod - Title of the shipping method",
                        " */",
                        "Cypress.Commands.add('selectShippingMethodForSalesChannel', (shippingMethod) => {",
                        "    cy.intercept({",
                        "        url: `**/${Cypress.env('apiPath')}/search/sales-channel`,",
                        "        method: 'POST'",
                        "    }).as('sales-channel');",
                        "    cy.intercept('POST', `**/${Cypress.env('apiPath')}/search/shipping-method`, (req) => {",
                        "        const { body } = req",
                        "        if (body.hasOwnProperty('term') && body.term === shippingMethod) {",
                        "            req.alias = 'shipping-method-search-for';",
                        "        } else {",
                        "            req.alias = 'shipping-method'",
                        "        }",
                        "    });",
                        "    cy.get('.sw-sales-channel-detail__select-shipping-methods').scrollIntoView();",
                        "    cy.get('.sw-sales-channel-detail__select-shipping-methods').then(($body) => {",
                        "        if (!$body.text().includes(shippingMethod)) {",
                        "            cy.get('.sw-sales-channel-detail__select-shipping-methods .sw-select-selection-list__input').should('be.visible')",
                        "                .type(shippingMethod);",
                        "            cy.wait('@shipping-method-search-for').its('response.statusCode').should('equal', 200);",
                        "            cy.get('.sw-select-result-list__content').should('have.length', 1);",
                        "            cy.get('.sw-select-result-list__content').contains(shippingMethod).should('be.visible').click({ force:true });",
                        "            cy.wait('@shipping-method').its('response.statusCode').should('equal', 200);",
                        "        }",
                        "    });",
                        "    cy.get('.sw-sales-channel-detail__assign-shipping-methods').then(($body) => {",
                        "        if (!$body.text().includes(shippingMethod)) {",
                        "            cy.get('.sw-sales-channel-detail__assign-shipping-methods').type(shippingMethod).should('be.visible');",
                        "            cy.wait('@shipping-method-search-for').its('response.statusCode').should('equal', 200);",
                        "            cy.get('.sw-select-result').should('have.length', 1);",
                        "            cy.contains('.sw-select-result', shippingMethod).should('be.visible').click({ force:true });",
                        "        }",
                        "    });",
                        "    cy.get('.sw-sales-channel-detail__save-action').should('be.visible').click();",
                        "    cy.wait('@sales-channel').its('response.statusCode').should('equal', 200);",
                        "    cy.get('.sw-skeleton').should('not.exist');",
                        "    cy.get('.sw-loader').should('not.exist');",
                        "    cy.get('.sw-sales-channel-detail__select-shipping-methods').scrollIntoView();",
                        "    cy.contains('.sw-sales-channel-detail__select-shipping-methods', shippingMethod).should('be.visible');",
                        "    cy.contains('.sw-sales-channel-detail__assign-shipping-methods', shippingMethod).should('be.visible');",
                        "});",
                        "",
                        "/**",
                        " * Returns currency (selects and assign as default) for sales channel",
                        " * @memberOf Cypress.Chainable#",
                        " * @name selectCurrencyForSalesChannel",
                        " * @function",
                        " * @param {String} currency - Title of the currency",
                        " */",
                        "Cypress.Commands.add('selectCurrencyForSalesChannel', (currency) => {",
                        "    cy.intercept({",
                        "        url: `**/${Cypress.env('apiPath')}/search/sales-channel`,",
                        "        method: 'POST'",
                        "    }).as('sales-channel');",
                        "    cy.intercept({",
                        "        url: `**/${Cypress.env('apiPath')}/search/currency`,",
                        "        method: 'POST'",
                        "    }).as('currency');",
                        "",
                        "    cy.get('.sw-sales-channel-detail__select-currencies').scrollIntoView();",
                        "    cy.get('.sw-sales-channel-detail__select-currencies').then(($body) => {",
                        "        if (!$body.text().includes(currency)) {",
                        "            cy.get('.sw-sales-channel-detail__select-currencies .sw-select-selection-list__input').type(currency).should('be.visible');",
                        "            cy.wait('@currency').its('response.statusCode').should('equal', 200);",
                        "            cy.get('.sw-select-result-list__content').should('have.length', 1);",
                        "            cy.get('.sw-select-result-list__content').contains(currency).should('be.visible').click({ force:true });",
                        "            cy.wait('@currency').its('response.statusCode').should('equal', 200);",
                        "        }",
                        "    });",
                        "    cy.get('.sw-sales-channel-detail__assign-currencies').then(($body) => {",
                        "        if (!$body.text().includes(currency)) {",
                        "            cy.get('.sw-sales-channel-detail__assign-currencies').type(currency).should('be.visible');",
                        "            cy.wait('@currency').its('response.statusCode').should('equal', 200);",
                        "            cy.get('.sw-select-result-list__content').should('have.length', 1);",
                        "            cy.contains('.sw-select-result', currency).click({ force:true });",
                        "        }",
                        "    });",
                        "    cy.get('.sw-sales-channel-detail__save-action').click();",
                        "    cy.wait('@sales-channel').its('response.statusCode').should('equal', 200);",
                        "    cy.get('.sw-skeleton').should('not.exist');",
                        "    cy.get('.sw-loader').should('not.exist');",
                        "    cy.get('.sw-sales-channel-detail__select-currencies').scrollIntoView();",
                        "    cy.contains('.sw-sales-channel-detail__select-currencies', currency).should('be.visible');",
                        "    cy.contains('.sw-sales-channel-detail__assign-currencies', currency).should('be.visible');",
                        "});",
                        "",
                        "",
                        "/**",
                        " * Returns language (selects and assign as default) for sales channel",
                        " * @memberOf Cypress.Chainable#",
                        " * @name selectLanguageForSalesChannel",
                        " * @function",
                        " * @param {String} language - Title of the language",
                        " */",
                        "Cypress.Commands.add('selectLanguageForSalesChannel', (language) => {",
                        "    cy.intercept({",
                        "        url: `**/${Cypress.env('apiPath')}/search/sales-channel`,",
                        "        method: 'POST'",
                        "    }).as('sales-channel');",
                        "    cy.intercept({",
                        "        url: `**/${Cypress.env('apiPath')}/search/language`,",
                        "        method: 'POST'",
                        "    }).as('language');",
                        "",
                        "    cy.get('.sw-sales-channel-detail__select-languages').scrollIntoView();",
                        "    cy.get('.sw-sales-channel-detail__select-languages').then(($body) => {",
                        "        if (!$body.text().includes(language)) {",
                        "            cy.get('.sw-sales-channel-detail__select-languages .sw-select-selection-list__input').type(language).should('be.visible');",
                        "            cy.wait('@language').its('response.statusCode').should('equal', 200);",
                        "            cy.get('.sw-select-result-list__content').should('have.length', 1);",
                        "            cy.get('.sw-select-result-list__content').contains(language).should('be.visible').click({ force:true });",
                        "            cy.wait('@language').its('response.statusCode').should('equal', 200);",
                        "        }",
                        "    });",
                        "    cy.get('.sw-sales-channel-detail__assign-languages').then(($body) => {",
                        "        if (!$body.text().includes(language)) {",
                        "            cy.get('.sw-sales-channel-detail__assign-languages').type(language).should('be.visible');",
                        "            cy.wait('@language').its('response.statusCode').should('equal', 200);",
                        "            cy.get('.sw-select-result-list__content').should('have.length', 1);",
                        "            cy.contains('.sw-select-result', language).should('be.visible').click({ force:true });",
                        "        }",
                        "    });",
                        "    cy.get('.sw-sales-channel-detail__save-action').should('be.visible').click();",
                        "    cy.get('.sw-skeleton').should('not.exist');",
                        "    cy.get('.sw-loader').should('not.exist');",
                        "    cy.wait('@sales-channel').its('response.statusCode').should('equal', 200);",
                        "    cy.get('.sw-sales-channel-detail__select-languages').scrollIntoView();",
                        "    cy.contains('.sw-sales-channel-detail__select-languages', language).should('be.visible');",
                        "    cy.contains('.sw-sales-channel-detail__assign-languages', language).should('be.visible');",
                        "});",
                        "",
                        "/**",
                        " * Updates an existing entity using Shopware API at the given endpoint",
                        " * @memberOf Cypress.Chainable#",
                        " * @name prepareAdminForScreenshot",
                        " * @function",
                        " */",
                        "Cypress.Commands.add('prepareAdminForScreenshot', () => {",
                        "    // Hide version information, as it could change",
                        "    cy.changeElementStyling(",
                        "        '.sw-version__info',",
                        "        'visibility: hidden'",
                        "    );",
                        "",
                        "    if (Cypress.env('testBase') === 'Update') {",
                        "        cy.get('.sw-avatar')",
                        "            .should('have.css', 'background-image')",
                        "            .and('match', /Max%20Mustermann.png/);",
                        "    }",
                        "    cy.get('body').then(($body) => {",
                        "        if ($body.find('.sw-notification__alert').length) {",
                        "            // Hide notifications for visual testing",
                        "            cy.changeElementStyling(",
                        "                '.sw-notification__alert',",
                        "                'display: none'",
                        "            );",
                        "        }",
                        "    })",
                        "    cy.log('Admin successfully prepared for percy usage!')",
                        "});",
                        "",
                        "/**",
                        " * Creates a product with multiple reviews",
                        " * @memberOf Cypress.Chainable#",
                        " * @name createMultipleReviewsFixture",
                        " * @param {array} additionalReviews - Array with reviews which will be created additionally",
                        " * @param {Boolean} overwriteReviews - Set to true to only use the reviews passed by `additionalReviews`",
                        " * @function",
                        " */",
                        "Cypress.Commands.add('createMultipleReviewsFixture', (additionalReviews = [], overwriteReviews= false) => {",
                        "    // Use a fixed `productId` to assign reviews to product",
                        "    const productId = '83450210115646e7acd1ac896452a5f3';",
                        "    let product = null;",
                        "    let salesChannelId = null;",
                        "",
                        "    const fixtureReviews = [",
                        "        {",
                        "            content: \"Exercitationem qui placeat labore similique.\",",
                        "            points: 5,",
                        "            title: \"Best product ever\",",
                        "        },",
                        "        {",
                        "            content: \"Lorem ipsum Exercitationem qui placeat labore similique.\",",
                        "            points: 2,",
                        "            title: \"Meh.\",",
                        "        },",
                        "        {",
                        "            content: \"Exercitationem qui placeat labore similique.\",",
                        "            points: 3,",
                        "            title: \"It could be worse.\",",
                        "        },",
                        "        {",
                        "            content: \"Exercitationem qui placeat labore similique.\",",
                        "            points: 1,",
                        "            title: \"Not the yellow from the egg.\",",
                        "        },",
                        "        {",
                        "            content: \"Exercitationem qui placeat labore similique.\",",
                        "            points: 5,",
                        "            title: \"My life has changed!\",",
                        "        },",
                        "        {",
                        "            content: \"Exercitationem qui placeat labore similique.\",",
                        "            points: 4,",
                        "            title: \"Pretty good overall\",",
                        "        },",
                        "        {",
                        "            content: \"Exercitationem qui placeat labore similique.\",",
                        "            points: 5,",
                        "            title: \"Best ever\",",
                        "        },",
                        "        {",
                        "            content: \"Exercitationem qui placeat labore similique.\",",
                        "            points: 5,",
                        "            title: \"This is not a bought review at all. 5 stars!!!\",",
                        "        },",
                        "        {",
                        "            content: \"Exercitationem qui placeat labore similique.\",",
                        "            points: 5,",
                        "            title: \"This is really nice\",",
                        "        },",
                        "        {",
                        "            content: \"Exercitationem qui placeat labore similique.\",",
                        "            points: 1,",
                        "            title: \"I want my money back\",",
                        "        },",
                        "        {",
                        "            content: \"Exercitationem qui placeat labore similique.\",",
                        "            points: 3,",
                        "            title: \"Average...\",",
                        "        },",
                        "        {",
                        "            content: \"Exercitationem qui placeat labore similique.\",",
                        "            points: 5,",
                        "            title: \"Profit!\",",
                        "        },",
                        "        ...additionalReviews",
                        "    ];",
                        "",
                        "    const productReviews = overwriteReviews ? additionalReviews : fixtureReviews;",
                        "",
                        "    return cy.createProductFixture({ id: productId }).then(() => {",
                        "        return cy.fixture('product');",
                        "    }).then((result) => {",
                        "        product = result;",
                        "    }).then(() => {",
                        "        // Sales channel id is needed in order to display the reviews",
                        "        return cy.searchViaAdminApi({",
                        "            endpoint: 'sales-channel',",
                        "            data: {",
                        "                field: 'name',",
                        "                value: 'Storefront'",
                        "            }",
                        "        });",
                        "    }).then((response) => {",
                        "        salesChannelId = response.id;",
                        "",
                        "        return cy.authenticate();",
                        "    }).then((result) => {",
                        "        // Create reviews with sync API",
                        "        return cy.request({",
                        "            headers: {",
                        "                Accept: 'application/vnd.api+json',",
                        "                Authorization: `Bearer ${result.access}`,",
                        "                'Content-Type': 'application/json'",
                        "            },",
                        "            method: 'POST',",
                        "            url: '/api/_action/sync',",
                        "            qs: {",
                        "                response: true",
                        "            },",
                        "            body: {",
                        "                'write-product_review': {",
                        "                    entity: 'product_review',",
                        "                    action: 'upsert',",
                        "                    payload: productReviews.map((review) => {",
                        "                        return {",
                        "                            ...review,",
                        "                            ...{",
                        "                                productId: productId,",
                        "                                salesChannelId: salesChannelId,",
                        "                                status: true",
                        "                            }",
                        "                        };",
                        "                    })",
                        "                }",
                        "            }",
                        "        });",
                        "    }).then((reviews) => {",
                        "        // Return created product and reviews for further processing",
                        "        return { product, reviews };",
                        "    });",
                        "});",
                        "",
                        "/**",
                        " * Changes text of an element. Useful for visual testing. Be aware you'll influence the test using this.",
                        " * @memberOf Cypress.Chainable#",
                        " * @name changeElementText",
                        " * @function",
                        " * @param {String} selector - API endpoint for the request",
                        " * @param {String} text - API endpoint for the request",
                        " */",
                        "Cypress.Commands.add('changeElementText', (selector, text) => {",
                        "    cy.get(selector)",
                        "        .invoke('text', text)",
                        "        .should('contain', text);",
                        "});",
                        "",
                        "/**",
                        " * checks iframe content for sdk test",
                        " * @memberOf Cypress.Chainable#",
                        " * @name getSDKiFrame",
                        " * @param {strong} iframe - String of custom url to select iframe",
                        " * @function",
                        " */",
                        "Cypress.Commands.add('getSDKiFrame', (locationId) => {",
                        "    cy.get(`iframe[src*=\"location-id=${locationId}\"]`)",
                        "        .its('0.contentDocument.body')",
                        "        .should('not.be.empty')",
                        "        .then(cy.wrap);",
                        "});",
                        "",
                        "Cypress.Commands.add('cleanUpPreviousState', () => {",
                        "    // noop",
                        "});",
                        ""
                    ],
                    "executable": false
                },
                "tests/e2e/cypress/support/e2e.js": {
                    "contents": [
                        "// ***********************************************************",
                        "// This example support/index.js is processed and",
                        "// loaded automatically before your test files.",
                        "//",
                        "// This is a great place to put global configuration and",
                        "// behavior that modifies Cypress.",
                        "//",
                        "// You can change the location of this file or turn off",
                        "// automatically serving support files with the",
                        "// 'supportFile' configuration option.",
                        "//",
                        "// You can read more here:",
                        "// https://on.cypress.io/configuration",
                        "// ***********************************************************",
                        "//",
                        "import 'cypress-file-upload';",
                        "import 'cypress-real-events/support';",
                        "",
                        "require('@shopware-ag/e2e-testsuite-platform/cypress/support');",
                        "",
                        "// load and register the grep feature",
                        "// https://github.com/bahmutov/cypress-grep",
                        "require('cypress-grep')()",
                        "",
                        "// Custom administration commands",
                        "require('./commands/commands');",
                        "require('./commands');",
                        "",
                        "Cypress.Cookies.defaults({",
                        "    preserve: ['_test-api-dbName', '_apiAuth', 'bearerAuth', 'refreshBearerAuth']",
                        "})",
                        "",
                        "// this sets the default browser locale to the environment variable",
                        "Cypress.on('window:before:load', (window) => {",
                        "    Object.defineProperty(window.navigator, 'language', {",
                        "        value: Cypress.env('locale')",
                        "    })",
                        "})",
                        "",
                        "beforeEach(() => {",
                        "    if (!Cypress.env('SKIP_INIT')) {",
                        "        return cy.setToInitialState();",
                        "    }",
                        "});",
                        "",
                        "// we need to use the classic function syntax to bind `this` correctly",
                        "afterEach(function () {",
                        "    const { state, _currentRetry, _retries } = this.currentTest;",
                        "    if (Cypress.env('INTERRUPT_ON_ERROR') && state === 'failed' && _currentRetry >= _retries) {",
                        "        throw new Error('Interrupt');",
                        "    }",
                        "})"
                    ],
                    "executable": false
                },
                "tests/e2e/cypress/support/pages/account.page-object.js": {
                    "contents": [
                        "export default class AccountPageObject {",
                        "    constructor() {",
                        "        this.elements = {",
                        "            // General components",
                        "            loader: '.sw-loader',",
                        "            modal: '.sw-modal',",
                        "            modalTitle: '.sw-modal__title',",
                        "            modalFooter: '.sw-modal__footer',",
                        "            selectSelectedItem: '.sw-select__selection',",
                        "            selectInput: '.sw-select__input',",
                        "",
                        "            // Admin menu",
                        "            adminMenu: '.sw-admin-menu',",
                        "",
                        "            // Smart bar",
                        "            smartBarHeader: '.smart-bar__header',",
                        "            smartBarAmount: '.sw-page__smart-bar-amount',",
                        "            smartBarBack: 'a.smart-bar__back-btn',",
                        "",
                        "            // Listing components",
                        "            gridRow: '.sw-grid__row',",
                        "            gridRowInlineEdit: '.sw-grid-row__inline-edit-action',",
                        "",
                        "            dataGridRow: '.sw-data-grid__row',",
                        "            dataGridColumn: '.sw-data-grid__cell',",
                        "            dataGridInlineEditSave: '.sw-data-grid__inline-edit-save',",
                        "",
                        "            emptyState: '.sw-empty-state',",
                        "            contextMenu: '.sw-context-menu',",
                        "            contextMenuButton: '.sw-context-button__button',",
                        "",
                        "            // Create/detail components",
                        "            primaryButton: '.sw-btn-primary',",
                        "            lightButton: '.btn-light',",
                        "            cardTitle: '.sw-card__title',",
                        "",
                        "            // Notifications",
                        "            alert: '.sw-alert',",
                        "            alertClose: '.sw-alert__close',",
                        "            notification: '.sw-notifications__notification',",
                        "            accountRoot: '.account',",
                        "            accountHeadline: '.account-welcome',",
                        "            accountMenu: '.js-account-menu-dropdown',",
                        "            accountSidebar: '.account-sidebar',",
                        "",
                        "            // Register - Login",
                        "            registerCard: '.register-card',",
                        "            registerForm: '.register-form',",
                        "            registerSubmit: '.register-submit',",
                        "            registerCheckbox: '.register-different-shipping input',",
                        "            loginCard: '.login-card',",
                        "            loginForm: '.login-form',",
                        "            loginSubmit: '.login-submit',",
                        "",
                        "            // Address",
                        "            addressRoot: '.account-address',",
                        "            addressForm: '.account-address-form',",
                        "            addressBox: '.address-box',",
                        "            overViewBillingAddress: '.overview-billing-address',",
                        "            overViewShippingAddress: '.overview-shipping-address'",
                        "        };",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "tests/e2e/cypress/support/pages/checkout.page-object.js": {
                    "contents": [
                        "export default class CheckoutPageObject {",
                        "    constructor() {",
                        "        this.elements = {",
                        "            // General components",
                        "            loader: '.sw-loader',",
                        "            modal: '.sw-modal',",
                        "            modalTitle: '.sw-modal__title',",
                        "            modalFooter: '.sw-modal__footer',",
                        "            selectSelectedItem: '.sw-select__selection',",
                        "            selectInput: '.sw-select__input',",
                        "",
                        "            // Admin menu",
                        "            adminMenu: '.sw-admin-menu',",
                        "",
                        "            // Smart bar",
                        "            smartBarHeader: '.smart-bar__header',",
                        "            smartBarAmount: '.sw-page__smart-bar-amount',",
                        "            smartBarBack: 'a.smart-bar__back-btn',",
                        "",
                        "            // Listing components",
                        "            gridRow: '.sw-grid__row',",
                        "            gridRowInlineEdit: '.sw-grid-row__inline-edit-action',",
                        "",
                        "            dataGridRow: '.sw-data-grid__row',",
                        "            dataGridColumn: '.sw-data-grid__cell',",
                        "            dataGridInlineEditSave: '.sw-data-grid__inline-edit-save',",
                        "",
                        "            emptyState: '.sw-empty-state',",
                        "            contextMenu: '.sw-context-menu',",
                        "            contextMenuButton: '.sw-context-button__button',",
                        "",
                        "            // Create/detail components",
                        "            primaryButton: '.sw-btn-primary',",
                        "            lightButton: '.btn-light',",
                        "            cardTitle: '.sw-card__title',",
                        "",
                        "            // Notifications",
                        "            alert: '.sw-alert',",
                        "            alertClose: '.sw-alert__close',",
                        "            notification: '.sw-notifications__notification',",
                        "",
                        "            // General cart selectors",
                        "            cartItem: '.cart-item',",
                        "            cartItemFeatureList: '.product-feature-list-list',",
                        "            cartItemFeatureListItem: '.product-feature-list-item',",
                        "            cartItemFeatureContainer: '.product-feature-feature',",
                        "            cartItemFeatureLabel: '.product-feature-label',",
                        "            cartItemFeatureValue: '.product-feature-value',",
                        "",
                        "            // Cart widget",
                        "            cardWidget: '.cart-widget',",
                        "",
                        "            // Offcanvas cart",
                        "            offCanvasCart: '.offcanvas',",
                        "            cartActions: '.cart-actions',",
                        "",
                        "            // payment method",
                        "            paymentMethodsContainer: '.payment-methods',",
                        "            paymentMethods: '.payment-method',",
                        "            paymentMethodsCollapseContainer: '.payment-methods > .collapse',",
                        "            paymentMethodsCollapseTrigger: '.payment-methods > .confirm-checkout-collapse-trigger',",
                        "            paymentFormConfirm: '#changeShippingForm',",
                        "",
                        "            // shipping method",
                        "            shippingMethodsContainer: '.shipping-methods',",
                        "            shippingMethods: '.shipping-method',",
                        "            shippingMethodsCollapseContainer: '.shipping-methods > .collapse',",
                        "            shippingMethodsCollapseTrigger: '.shipping-methods > .confirm-checkout-collapse-trigger',",
                        "            shippingFormConfirm: '#changeShippingForm'",
                        "        };",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "tests/e2e/cypress/support/pages/module/sw-admin-menu.page-object.js": {
                    "contents": [
                        "import elements from '../sw-general.page-object';",
                        "",
                        "export default class MenuPageObject {",
                        "    constructor() {",
                        "        this.elements = {",
                        "            ...elements,",
                        "            ...{",
                        "                menuToggleAction: '.sw-admin-menu__toggle',",
                        "                languageAction: '.sw-admin-menu__change-language-action'",
                        "            }",
                        "        };",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "tests/e2e/cypress/support/pages/module/sw-category.page-object.js": {
                    "contents": [
                        "import elements from '../sw-general.page-object';",
                        "",
                        "export default class CategoryPageObject {",
                        "    constructor() {",
                        "        this.elements = {",
                        "            ...elements,",
                        "            ...{",
                        "                categorySaveAction: '.sw-product-detail__save-action',",
                        "                categoryListName: `${elements.dataGridColumn}--name`,",
                        "                categoryTreeItem: '.sw-tree-item',",
                        "                categoryTreeItemInner: '.sw-category-tree__inner .sw-tree-item'",
                        "            }",
                        "        };",
                        "    }",
                        "",
                        "    changeTranslation(language, position) {",
                        "        cy.get('.sw-language-switch').click();",
                        "        cy.get('.sw-field__select-load-placeholder').should('not.exist');",
                        "        cy.get('.sw-select-result').should('be.visible');",
                        "        cy.get(`.sw-select-option--${position}`).contains(language).click();",
                        "        cy.get('.sw-field__select-load-placeholder').should('not.exist');",
                        "    }",
                        "",
                        "    selectCategory(value) {",
                        "        cy.get('.sw-category-tree__input-field').focus();",
                        "        cy.get('.sw-category-tree-field__results').should('be.visible');",
                        "        cy.get('.sw-tree-item__element').contains(value).parent().parent()",
                        "            .find('.sw-field__checkbox input')",
                        "            .click({ force: true });",
                        "        cy.get('.sw-category-tree-field__selected-label').contains(value).should('be.visible');",
                        "    }",
                        "",
                        "    resetCategory() {",
                        "        cy.get('.sw-category-tree-field__selected-label').each(($el) => {",
                        "            $el.trigger('mouseenter').find('.sw-label__dismiss').trigger('click');",
                        "        });",
                        "    }",
                        "",
                        "    clearCategory(category) {",
                        "        cy.get('.sw-category-tree-field__selected-label')",
                        "            .contains(category)",
                        "            .closest('.sw-category-tree-field__selected-label').each(($el) => {",
                        "                $el.trigger('mouseenter')",
                        "                    .find('.sw-label__dismiss')",
                        "                    .trigger('click');",
                        "            });",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "tests/e2e/cypress/support/pages/module/sw-customer.page-object.js": {
                    "contents": [
                        "/* global cy */",
                        "import elements from '../sw-general.page-object';",
                        "",
                        "export default class CustomerPageObject {",
                        "    constructor() {",
                        "        this.elements = {",
                        "            ...elements,",
                        "            ...{",
                        "                customerForm: '.sw-customer-base-form',",
                        "                customerMailInput: 'input[name=sw-field--customer-email]',",
                        "                customerMetaData: '.sw-customer-card__metadata',",
                        "                customerSaveAction: '.smart-bar__actions button.sw-button--primary',",
                        "                columnName: `${elements.dataGridColumn}--firstName`",
                        "            }",
                        "        };",
                        "    }",
                        "",
                        "    createBasicAddress(customer) {",
                        "        cy.window().then((win) => {",
                        "            cy.get('input[name=\"sw-field--address-company\"]').type(customer.company);",
                        "            cy.get('input[name=\"sw-field--address-department\"]').type(customer.department);",
                        "        });",
                        "",
                        "        cy.get('.sw-customer-address-form__salutation-select')",
                        "            .typeSingleSelectAndCheck(customer.salutation, '.sw-customer-address-form__salutation-select');",
                        "        cy.get('input[name=sw-field--address-firstName]').type(customer.firstName);",
                        "        cy.get('input[name=sw-field--address-lastName]').type(customer.lastName);",
                        "        cy.get('input[name=sw-field--address-street]').type(customer.addresses[0].street);",
                        "        cy.get('input[name=sw-field--address-zipcode]').type(customer.addresses[0].zipcode);",
                        "        cy.get('input[name=sw-field--address-city]').type(customer.addresses[0].city);",
                        "        cy.get('.sw-customer-address-form__country-select')",
                        "            .typeSingleSelectAndCheck(customer.country, '.sw-customer-address-form__country-select');",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "tests/e2e/cypress/support/pages/module/sw-manufacturer.page-object.js": {
                    "contents": [
                        "import elements from '../sw-general.page-object';",
                        "",
                        "export default class ManufacturerPageObject {",
                        "    constructor() {",
                        "        this.elements = {",
                        "            ...elements,",
                        "            ...{",
                        "                manufacturerSave: '.sw-manufacturer-detail__save-action'",
                        "            }",
                        "        };",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "tests/e2e/cypress/support/pages/module/sw-media.page-object.js": {
                    "contents": [
                        "import elements from '../sw-general.page-object';",
                        "",
                        "export default class MediaPageObject {",
                        "    constructor() {",
                        "        this.elements = {",
                        "            ...elements,",
                        "            ...{",
                        "                uploadInput: '#files',",
                        "                previewItem: '.sw-media-preview-v2__item',",
                        "                previewPlaceholder: '.sw-media-preview-v2__placeholder',",
                        "                folderPreviewItem: '.sw-media-base-item__preview-container',",
                        "                baseItem: '.sw-media-base-item',",
                        "                baseItemName: '.sw-media-base-item__name',",
                        "                gridItem: '.sw-media-grid-item__item',",
                        "                mediaItem: '.sw-media-media-item',",
                        "                folderItem: '.sw-media-folder-item',",
                        "                folderNameInput: 'input[name=media-item-name]',",
                        "                folderNameLabel: '.sw-media-folder-item .sw-media-base-item__name',",
                        "                folderBreadcrumbBack: '.icon--multicolor-folder-breadcrumbs-dropdown',",
                        "                mediaNameLabel: '.sw-media-media-item .sw-media-base-item__name',",
                        "                showMediaAction: '.sw-media-context-item__show-media-action',",
                        "                showSettingsAction: '.sw-media-context-item__open-settings-action',",
                        "                saveSettingsAction: '.sw-media-modal-folder-settings__confirm',",
                        "                mediaQuickInfo: '.sw-media-quickinfo',",
                        "            },",
                        "        };",
                        "    }",
                        "",
                        "    uploadImageUsingUrl(path) {",
                        "        cy.get('.sw-media-url-form').should('be.visible');",
                        "        cy.get('input[name=sw-field--url]').should('be.visible')",
                        "            .type(path);",
                        "        cy.get('.sw-media-url-form__submit-button').click();",
                        "",
                        "        cy.get('.sw-media-preview-v2__item').should('be.visible');",
                        "        return this;",
                        "    }",
                        "",
                        "    uploadImageUsingFileUpload(path) {",
                        "        cy.get(this.elements.uploadInput).attachFile(path);",
                        "        cy.get('.sw-media-preview-v2__item').should('be.visible');",
                        "",
                        "        return this;",
                        "    }",
                        "",
                        "    moveMediaItem(name, {",
                        "        itemType,",
                        "        position = 0,",
                        "        listingPosition = 0,",
                        "    }) {",
                        "        let mediaItem = this.elements.mediaItem;",
                        "        let contextMenuItemSelector = '.sw-media-context-item__move-media-action';",
                        "        if (itemType === 'folder') {",
                        "            mediaItem = `${this.elements.gridItem}--${position}`;",
                        "            contextMenuItemSelector = '.sw-media-context-item__move-folder-action';",
                        "        }",
                        "",
                        "        cy.clickContextMenuItem(",
                        "            contextMenuItemSelector,",
                        "            this.elements.contextMenuButton,",
                        "            mediaItem,",
                        "            '',",
                        "            true,",
                        "        );",
                        "        cy.get(this.elements.modalTitle).contains(`Move \"${name}\"`);",
                        "        cy.get('.sw-media-modal-move__confirm').should('be.disabled');",
                        "",
                        "        cy.get(`.sw-media-folder-content__list-item--${listingPosition}`).click();",
                        "        cy.get('.sw-media-modal-move__confirm').should('not.be.disabled');",
                        "        cy.get('.sw-media-modal-move__confirm').click();",
                        "",
                        "        if (itemType === 'folder') {",
                        "            cy.awaitAndCheckNotification('Media items have been moved.', {",
                        "                position: 1,",
                        "            });",
                        "        } else {",
                        "            cy.awaitAndCheckNotification('Media items have been moved.');",
                        "        }",
                        "    }",
                        "",
                        "    setThumbnailSize(size, position = 0) {",
                        "        cy.get('input[name=sw-field--width').type(size.width);",
                        "",
                        "        if (size.height) {",
                        "            cy.get('.sw-media-add-thumbnail-form__lock').click();",
                        "            cy.get('input[name=sw-field--height]').type(`{selectall}${size.height}`);",
                        "            cy.get('.sw-media-folder-settings__add-thumbnail-size-action.is--disabled')",
                        "                .should('not.exist');",
                        "            cy.get('.sw-media-folder-settings__add-thumbnail-size-action').click();",
                        "            cy.get(`.sw-media-modal-folder-settings__entry--${position} label`)",
                        "                .contains(`${size.width}x${size.height}`);",
                        "        } else {",
                        "            cy.get('.sw-media-folder-settings__add-thumbnail-size-action').click();",
                        "            cy.get(`.sw-media-modal-folder-settings__entry--${position} label`)",
                        "                .contains(`${size.width}x${size.width}`);",
                        "        }",
                        "    }",
                        "",
                        "    createFolder(name) {",
                        "        cy.get('.sw-media-index__create-folder-action').click();",
                        "        cy.get(this.elements.folderNameInput).type(name);",
                        "        cy.get(this.elements.folderNameInput).type('{enter}');",
                        "        cy.get('.sw-media-base-item__loader').should('not.exist');",
                        "    }",
                        "",
                        "    deleteFile(fileName) {",
                        "        cy.get(`${this.elements.mediaItem} ${this.elements.previewItem}`).should('be.visible');",
                        "        cy.get(`${this.elements.mediaItem} ${this.elements.previewItem}`).click({ force: true });",
                        "        cy.get('.sw-media-sidebar__headline').should('be.visible');",
                        "        cy.get('.sw-media-sidebar__headline').contains(fileName);",
                        "        cy.get('.sw-media-sidebar__quickinfo-scroll-container .sw-media-preview-v2__item')",
                        "            .should('have.attr', 'src')",
                        "            .and('match', new RegExp(fileName));",
                        "",
                        "        // Deletion",
                        "        cy.get('li.quickaction--delete').click();",
                        "        cy.get(`${this.elements.modal}__body`).contains(`Are you sure you want to delete \"${fileName}\"?`);",
                        "        cy.get('.sw-media-modal-delete__confirm').click();",
                        "        cy.wait('@deleteData').its('response.statusCode').should('equal', 204);",
                        "        cy.get(`input[placeholder=\"${fileName}\"]`).should('not.exist');",
                        "    }",
                        "",
                        "    dissolve(fileName) {",
                        "        cy.get(`.sw-media-base-item__name[title=\"${fileName}\"]`).should('be.visible');",
                        "",
                        "        // Navigate back",
                        "        cy.get('.icon--multicolor-folder-breadcrumbs-back-to-root').click();",
                        "        cy.get(this.elements.loader).should('not.exist');",
                        "        cy.get('.icon--multicolor-folder-breadcrumbs-back-to-root').should('not.exist');",
                        "",
                        "        // dissolve folder",
                        "        cy.get(this.elements.loader).should('not.exist');",
                        "        cy.clickContextMenuItem(",
                        "            '.sw-media-context-item__dissolve-folder-action',",
                        "            this.elements.contextMenuButton,",
                        "            `${this.elements.gridItem}--0`,",
                        "            '',",
                        "            true,",
                        "        );",
                        "        cy.get(`${this.elements.modal}__body`)",
                        "            .contains('Are you sure you want to dissolve \"A thing to fold about\" ?');",
                        "        cy.get('.sw-media-modal-folder-dissolve__confirm').click();",
                        "",
                        "        // Verify dissolved folder and existing image",
                        "        cy.get(this.elements.mediaNameLabel).contains(fileName);",
                        "        cy.get('.sw-media-base-item__name[title=\"A thing to fold about\"]').should('not.exist');",
                        "    }",
                        "",
                        "    openCurrentFolderConfiguration() {",
                        "        cy.get('.sw-media-sidebar__quickaction.quickaction--settings').click();",
                        "",
                        "        cy.wait('@getMediaFolderConfiguration');",
                        "        cy.wait('@getThumbnailSizes');",
                        "",
                        "        cy.get('.sw-media-folder-settings__thumbnails-tab').click();",
                        "    }",
                        "",
                        "    openChildConfiguration(name) {",
                        "        cy.intercept({",
                        "            url: `${Cypress.env('apiPath')}/search/media-folder-configuration`,",
                        "            method: 'post',",
                        "        }).as('getMediaFolderConfiguration');",
                        "        cy.intercept({",
                        "            url: `${Cypress.env('apiPath')}/search/media-folder-configuration/**/media-thumbnail-sizes`,",
                        "            method: 'post',",
                        "        }).as('getThumbnailSizes');",
                        "",
                        "        cy.get('.sw-media-folder-item')",
                        "            .contains('.sw-media-base-item__name', name)",
                        "            .parents('.sw-media-base-item')",
                        "            .find('.sw-context-button__button')",
                        "            .invoke('attr', 'style', 'visibility: visible')",
                        "            .click();",
                        "        cy.get('.sw-media-context-item__open-settings-action').click();",
                        "",
                        "        cy.wait('@getMediaFolderConfiguration');",
                        "        cy.wait('@getThumbnailSizes');",
                        "",
                        "        cy.get('.sw-media-folder-settings__thumbnails-tab').click();",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "tests/e2e/cypress/support/pages/module/sw-newsletter-recipient.page-object.js": {
                    "contents": [
                        "import elements from '../sw-general.page-object';",
                        "",
                        "export default class NewsletterRecipientPageObject {",
                        "    constructor() {",
                        "        this.elements = {",
                        "            ...elements,",
                        "            ...{",
                        "                newsletteSave: '.sw-newsletter-recipient-detail__open-edit-mode-action'",
                        "            }",
                        "        };",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "tests/e2e/cypress/support/pages/module/sw-order.page-object.js": {
                    "contents": [
                        "import elements from '../sw-general.page-object';",
                        "",
                        "export default class OrderPageObject {",
                        "    constructor() {",
                        "        this.elements = {",
                        "            ...elements,",
                        "            ...{",
                        "                loader: '.sw-skeleton.sw-skeleton__detail',",
                        "                smartBarSave: '.sw-order-detail__smart-bar-save-button',",
                        "                userMetadata: '.sw-order-user-card__metadata',",
                        "                stateSelects: {",
                        "                    orderTransactionStateSelect: '.sw-order-state-select-v2__order_transaction',",
                        "                    orderDeliveryStateSelect: '.sw-order-state-select-v2__order_delivery',",
                        "                    orderStateSelect: '.sw-order-state-select-v2__order',",
                        "                },",
                        "                tabs: {",
                        "                    activeTab: '.sw-tabs__content > .sw-tabs-item.sw-tabs-item--active',",
                        "                    detailsTab: '.sw-order-detail__tabs-tab-details',",
                        "                    documentsTab: '.sw-order-detail__tabs-tab-documents',",
                        "                    generalTab: '.sw-order-detail__tabs-tab-general',",
                        "                    details: {",
                        "                        disableAutomaticPromotionsSwitch: '.sw-order-promotion-field .sw-field--switch__input',",
                        "                        openStateHistoryModalButton: '.sw-order-detail-state-card__state-history-button',",
                        "                    },",
                        "                    documents: {",
                        "                        addDocumentButton: '.sw-order-document-grid-button',",
                        "                        documentGrid: '.sw-order-detail-base__document-grid',",
                        "                        documentSettingsModal: '.sw-order-document-settings-modal',",
                        "                        documentTypeModal: '.sw-order-select-document-type-modal',",
                        "                        documentTypeModalRadios: '.sw-order-select-document-type-modal__radio-field',",
                        "                    },",
                        "                    general: {",
                        "                        // General info summary card",
                        "                        addProductButton: '.sw-order-line-items-grid__actions-container-add-product-btn',",
                        "                        generalInfoCard: '.sw-order-detail-base__general-info',",
                        "                        gridCard: '.sw-order-detail-general__line-item-grid-card',",
                        "                        summary: '.sw-order-detail-base__general-info__summary',",
                        "                        summaryMainHeader: '.sw-order-detail-base__general-info__summary-main-header',",
                        "                        summaryMainTotal: '.sw-order-detail-base__general-info__summary-main-total',",
                        "                        summarySubDescription: '.sw-order-detail-base__general-info__summary-sub-description',",
                        "                        summarySubLastChangedTime: '.sw-order-detail-base__general-info__summary-sub-last-changed-time',",
                        "                        summarySubLastChangedUser: '.sw-order-detail-base__general-info__summary-sub-last-changed-user',",
                        "                        summaryStateSelects: '.sw-order-detail-base__general-info__order-state',",
                        "                        summaryTagSelect: '.sw-order-detail-base__general-info__order-tags',",
                        "                    },",
                        "                },",
                        "            },",
                        "        };",
                        "    }",
                        "",
                        "    setOrderState({",
                        "                      stateTitle,",
                        "                      type,",
                        "                      signal = 'neutral',",
                        "                      scope = 'select',",
                        "                      call = null",
                        "                  }) {",
                        "        const stateColor = `.sw-order-state__${signal}-select`;",
                        "        const callType = type === 'payment' ? '_transaction' : '';",
                        "        const stateSelector = this.getStatesSelector(type, scope);",
                        "",
                        "        let stateMachineType;",
                        "",
                        "        cy.onlyOnFeature('FEATURE_NEXT_7530', () => {",
                        "            switch (type) {",
                        "                case 'payment':",
                        "                    stateMachineType = 'order_transaction';",
                        "                    break;",
                        "                case 'delivery':",
                        "                    stateMachineType = 'order_delivery';",
                        "                    break;",
                        "                case 'order':",
                        "                    stateMachineType = 'order';",
                        "                    break;",
                        "                default:",
                        "                    console.error(`Unknown state-machine type ${type}`);",
                        "            }",
                        "        });",
                        "",
                        "        // Request we want to wait for later",
                        "        cy.intercept({",
                        "            url: `**/${Cypress.env('apiPath')}/_action/order${callType}/**/state/${call}`,",
                        "            method: 'post',",
                        "        }).as(`${call}Call`);",
                        "",
                        "        cy.get(elements.loader).should('not.exist');",
                        "        cy.get(`${stateSelector} .sw-loader__element`).should('not.exist');",
                        "        cy.get(stateSelector).scrollIntoView();",
                        "",
                        "        cy.skipOnFeature('FEATURE_NEXT_7530', () => {",
                        "            cy.get(stateSelector)",
                        "                .should('be.visible')",
                        "                .select(stateTitle);",
                        "        });",
                        "",
                        "        cy.onlyOnFeature('FEATURE_NEXT_7530', () => {",
                        "            cy.get(stateSelector)",
                        "                .should('be.visible')",
                        "                .typeSingleSelect(",
                        "                    stateTitle,",
                        "                    stateSelector",
                        "                );",
                        "        });",
                        "",
                        "        cy.get('.sw-order-state-change-modal')",
                        "            .should('be.visible');",
                        "",
                        "        cy.get('.sw-order-state-change-modal-attach-documents__button')",
                        "            .click();",
                        "",
                        "        cy.wait(`@${call}Call`).its('response.statusCode').should('equal', 200);",
                        "",
                        "        cy.skipOnFeature('FEATURE_NEXT_7530', () => {",
                        "            cy.get(`${stateSelector} .sw-loader__element`).should('not.exist');",
                        "        });",
                        "",
                        "        cy.onlyOnFeature('FEATURE_NEXT_7530', () => {",
                        "            cy.get(stateSelector)",
                        "                .click()",
                        "                .find('.sw-single-select__selection-input')",
                        "                .should('have.attr', 'placeholder', stateTitle);",
                        "        });",
                        "",
                        "        cy.get(this.elements.loader).should('not.exist');",
                        "        cy.get(this.elements.smartBarHeader).click();",
                        "",
                        "        if (scope === 'select') {",
                        "            cy.get(stateColor).first().scrollIntoView();",
                        "            cy.get(stateColor).should('be.visible');",
                        "        }",
                        "    }",
                        "",
                        "    checkOrderHistoryEntry({ type, stateTitle, signal = 'neutral', position = 0 }) {",
                        "        cy.skipOnFeature('FEATURE_NEXT_7530', () => {",
                        "            const currentStatusIcon = `.sw-order-state__${signal}-icon`;",
                        "            const item = `.sw-order-state-history-card__${type}-state .sw-order-state-history__entry--${position}`;",
                        "",
                        "            cy.get('.sw-order-state-card').scrollIntoView();",
                        "            cy.get('.sw-order-state-card').should('be.visible');",
                        "            cy.get(`${item} ${currentStatusIcon}`).should('be.visible');",
                        "            cy.contains(item, stateTitle);",
                        "        });",
                        "",
                        "        cy.onlyOnFeature('FEATURE_NEXT_7530', () => {",
                        "            cy.get(this.elements.tabs.details.openStateHistoryModalButton)",
                        "                .first()",
                        "                .should('exist')",
                        "                .click({ force: true });",
                        "",
                        "            cy.get('.sw-modal').should('be.visible');",
                        "",
                        "            let dataGridRow = cy.get(`.sw-modal .sw-data-grid__row--${position}`);",
                        "",
                        "            if (!position) {",
                        "                dataGridRow = cy.get('.sw-modal .sw-data-grid__row').last();",
                        "            }",
                        "",
                        "            dataGridRow.should('be.visible');",
                        "",
                        "            if (type === 'payment') {",
                        "                type = 'transaction';",
                        "            }",
                        "",
                        "            const dataGridCell = dataGridRow.find(`.sw-data-grid__cell--${type}`);",
                        "",
                        "            dataGridCell.contains(stateTitle);",
                        "",
                        "            cy.get('.sw-modal__footer .sw-button')",
                        "                .should('be.visible')",
                        "                .click();",
                        "",
                        "            cy.get('.sw-modal').should('not.exist');",
                        "        });",
                        "    }",
                        "",
                        "    getStatesSelector(type, scope) {",
                        "        cy.skipOnFeature('FEATURE_NEXT_7530', () => {",
                        "            return `.sw-order-state-${scope}__${type}-state select[name=sw-field--selectedActionName]`;",
                        "        });",
                        "",
                        "        switch (type) {",
                        "            case 'payment':",
                        "                return this.elements.stateSelects.orderTransactionStateSelect;",
                        "            case 'delivery':",
                        "                return this.elements.stateSelects.orderDeliveryStateSelect;",
                        "            case 'order':",
                        "                return this.elements.stateSelects.orderStateSelect;",
                        "            default:",
                        "                console.error(`Unknown state type ${type}`);",
                        "        }",
                        "    }",
                        "",
                        "    changeActiveTab(tab) {",
                        "        let tabElement;",
                        "",
                        "        switch (tab) {",
                        "            case 'general':",
                        "                tabElement = cy.get(this.elements.tabs.generalTab);",
                        "                break;",
                        "            case 'details':",
                        "                tabElement = cy.get(this.elements.tabs.detailsTab);",
                        "                break;",
                        "            case 'documents':",
                        "                tabElement = cy.get(this.elements.tabs.documentsTab);",
                        "                break;",
                        "            default:",
                        "                console.error(`Unknown tab ${tab}`);",
                        "        }",
                        "",
                        "        tabElement",
                        "            .should('exist')",
                        "            .scrollIntoView()",
                        "            .click();",
                        "",
                        "        tabElement.should('have.class', 'sw-tabs-item--active');",
                        "",
                        "        cy.get(this.elements.loader).should('not.exist');",
                        "    }",
                        "}"
                    ],
                    "executable": false
                },
                "tests/e2e/cypress/support/pages/module/sw-payment.page-object.js": {
                    "contents": [
                        "import elements from '../sw-general.page-object';",
                        "",
                        "export default class PaymentPageObject {",
                        "    constructor() {",
                        "        this.elements = {",
                        "            ...elements,",
                        "            ...{",
                        "                paymentSaveAction: '.sw-payment-detail__save-action',",
                        "                shippingBackToListViewAction: '.sw-icon.icon--default-action-settings.sw-icon--small'",
                        "            }",
                        "        };",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "tests/e2e/cypress/support/pages/module/sw-product-stream.page-object.js": {
                    "contents": [
                        "/* global cy */",
                        "import elements from '../sw-general.page-object';",
                        "",
                        "export default class ProductStreamPageObject {",
                        "    constructor() {",
                        "        this.elements = {",
                        "            ...elements,",
                        "            ...{",
                        "                columnName: '.sw-product-stream-list__column-name',",
                        "                streamSaveAction: '.sw-product-stream-detail__save-action'",
                        "            }",
                        "        };",
                        "    }",
                        "",
                        "    deleteProductStream(productStreamName) {",
                        "        cy.get('.sw-sidebar__navigation .sw-sidebar-navigation-item').click();",
                        "        cy.get(this.elements.loader).should('not.exist');",
                        "        cy.clickContextMenuItem(",
                        "            '.sw-context-menu-item--danger',",
                        "            this.elements.contextMenuButton,",
                        "            `${this.elements.dataGridRow}--0`",
                        "        );",
                        "        cy.get(`${this.elements.modal}__body`)",
                        "            .contains(`Are you sure you want to delete the dynamic product group \"${productStreamName}\"?`);",
                        "",
                        "        cy.get(`${this.elements.modal}__footer button${this.elements.primaryButton}`).click();",
                        "        cy.get(this.elements.modal).should('not.exist');",
                        "    }",
                        "",
                        "    clickProductStreamFilterOption(productStreamFilterQuery, actionLabel) {",
                        "        productStreamFilterQuery.within(() => {",
                        "            cy.get('.sw-context-button').click();",
                        "        });",
                        "        cy.get('.sw-context-menu').contains(actionLabel).click();",
                        "    }",
                        "",
                        "    fillFilterWithSelect(selector, { field, operator, value }) {",
                        "        this.selectFieldAndOperator(selector, field, operator);",
                        "",
                        "        cy.get(selector).within(() => {",
                        "            // value is the last single-select",
                        "            cy.get('.sw-single-select').last().within(($singleSelect) => {",
                        "                cy.wrap($singleSelect).click();",
                        "                cy.get('.sw-select-result-list').should('be.visible');",
                        "                selectResultList().find('li.sw-select-result').contains(value).click();",
                        "            });",
                        "        });",
                        "    }",
                        "",
                        "    fillFilterWithEntitySelect(selector, { field, operator, value }) {",
                        "        this.selectFieldAndOperator(selector, field, operator);",
                        "",
                        "        cy.get(selector).within(() => {",
                        "            // value is the last single-select",
                        "            cy.get('.sw-entity-single-select').within(($singleSelect) => {",
                        "                cy.wrap($singleSelect).click();",
                        "                cy.get('.sw-select-result-list').should('be.visible');",
                        "                selectResultList().find('li.sw-select-result').contains(value).click();",
                        "            });",
                        "        });",
                        "    }",
                        "",
                        "    fillFilterWithEntityMultiSelect(selector, { field, operator, value }) {",
                        "        this.selectFieldAndOperator(selector, field, operator);",
                        "",
                        "        cy.get(selector).within((p) => {",
                        "            cy.get('.sw-entity-multi-select').within(($multiSelect) => {",
                        "                cy.get('.sw-select-selection-list__input').click();",
                        "                cy.get('.sw-select-result-list').should('be.visible');",
                        "            });",
                        "        });",
                        "",
                        "        value.forEach((value) => {",
                        "            // \"force: true\" is needed, because when clicking several entries, the tooltip might be overlapping",
                        "            // the next element to click",
                        "            cy.get('li.sw-select-result').contains(value).click({ force: true });",
                        "        });",
                        "    }",
                        "",
                        "    selectFieldAndOperator(selector, fieldPath, operator) {",
                        "        if (typeof fieldPath === 'string' && fieldPath !== '') {",
                        "            cy.wrap(fieldPath.split('.')).each((field) => {",
                        "                cy.get('.sw-product-stream-field-select').last().within(($singleSelect) => {",
                        "                    cy.wrap($singleSelect).click();",
                        "                    cy.get('.sw-select-result-list').should('be.visible');",
                        "                    selectResultList().find('li.sw-select-result').contains(field).click();",
                        "                });",
                        "            });",
                        "        }",
                        "",
                        "        if (typeof operator === 'string' && operator !== '') {",
                        "            cy.get('.sw-product-stream-value').within(() => {",
                        "                cy.get('.sw-single-select').first().click();",
                        "            });",
                        "",
                        "            cy.get('.sw-select-result-list').should('be.visible');",
                        "            cy.get('li.sw-select-result').contains(operator).click();",
                        "        }",
                        "    }",
                        "}",
                        "",
                        "function selectResultList() {",
                        "    return cy.window().then(() => {",
                        "        return cy.wrap(Cypress.$('.sw-select-result-list-popover-wrapper'));",
                        "    });",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "tests/e2e/cypress/support/pages/module/sw-product.page-object.js": {
                    "contents": [
                        "import elements from '../sw-general.page-object';",
                        "",
                        "export default class ProductPageObject {",
                        "    constructor() {",
                        "        this.elements = {",
                        "            ...elements,",
                        "            ...{",
                        "                productSaveAction: '.sw-product-detail__save-action',",
                        "                productListName: `${elements.dataGridColumn}--name`,",
                        "            },",
                        "        };",
                        "    }",
                        "",
                        "    createTag(value) {",
                        "        cy.get('.sw-product-category-form__tag-field input')",
                        "            .type(value);",
                        "        cy.get('.sw-select-result-list-popover-wrapper').contains(`Add \"${value}\"`);",
                        "        cy.get('.sw-product-category-form__tag-field input')",
                        "            .type('{enter}');",
                        "        cy.get('.sw-select-result-list-popover-wrapper').contains(value);",
                        "        cy.get('.sw-product-category-form__tag-field input').type('{esc}');",
                        "    }",
                        "",
                        "    changeTranslation(language, position) {",
                        "        cy.get('.sw-language-switch .sw-loader').should('not.exist');",
                        "        cy.get('.sw-language-switch').click();",
                        "        cy.get(`.sw-select-result-list__item-list .sw-select-option--${position}`)",
                        "            .contains(language)",
                        "            .click();",
                        "        cy.get('.sw-language-switch .sw-loader').should('not.exist');",
                        "    }",
                        "",
                        "",
                        "    generateVariants(propertyName, optionPosition, totalCount, prices = undefined) {",
                        "        const optionsIndicator = '.sw-property-search__tree-selection__column-items-selected.sw-grid-column--right span';",
                        "        const optionString = totalCount === 1 ? 'value' : 'values';",
                        "",
                        "        // Request we want to wait for later",
                        "        cy.intercept({",
                        "            url: `${Cypress.env('apiPath')}/_action/sync`,",
                        "            method: 'post',",
                        "        }).as('productCall');",
                        "",
                        "        cy.intercept({",
                        "            url: `${Cypress.env('apiPath')}/search/product`,",
                        "            method: 'post',",
                        "        }).as('searchCall');",
                        "",
                        "        cy.contains(propertyName).click();",
                        "",
                        "        for (const entry in Object.values(optionPosition)) { // eslint-disable-line",
                        "            if (optionPosition.hasOwnProperty(entry)) {",
                        "                cy.get(",
                        "                    `.sw-property-search__tree-selection__option_grid .sw-grid__row--${entry} .sw-field__checkbox input`,",
                        "                ).click();",
                        "            }",
                        "        }",
                        "",
                        "        if (prices !== undefined) {",
                        "            cy.get('.sw-tabs-item.sw-variant-modal__surcharge-configuration').click();",
                        "            cy.get('.sw-product-variants-configurator-prices').should('be.visible');",
                        "            cy.get('.sw-product-variants-configurator-prices__groups').contains(propertyName).click();",
                        "",
                        "            for (const entry of prices) {",
                        "                const [row, currency, field, value] = entry;",
                        "                cy.get(`.sw-data-grid__row--${row} #sw-field--price-${field}`)",
                        "                    .eq(Number(currency)).scrollIntoView().clear().type(value).blur();",
                        "            }",
                        "        }",
                        "",
                        "        cy.get(`.sw-grid ${optionsIndicator}`)",
                        "            .contains(new RegExp(`${optionPosition.length} (values? |)(selected|geselecteerde waarden|geselecteerde waarde)`));",
                        "        cy.get('.sw-product-variant-generation__generate-action').click();",
                        "        cy.get('.sw-product-modal-variant-generation__notification-modal').should('be.visible');",
                        "",
                        "        if (totalCount !== 1) {",
                        "            cy.get('.sw-product-modal-variant-generation__notification-modal .sw-modal__body')",
                        "                .contains(new RegExp(`${totalCount} (variants will be added|varianten worden toegevoegd)`));",
                        "        }",
                        "",
                        "        cy.get('.sw-product-modal-variant-generation__notification-modal .sw-button--primary').click()",
                        "            .then(() => {",
                        "                cy.get('.generate-variant-progress-bar__description').contains(new RegExp(`0 (of|van) ${totalCount} (variations generated|Varianten gegenereerd)`));",
                        "                cy.get('.sw-product-modal-variant-generation__notification-modal').should('not.exist');",
                        "            });",
                        "",
                        "        cy.wait('@productCall').its('response.statusCode').should('equal', 200);",
                        "",
                        "        cy.wait('@searchCall').its('response.statusCode').should('equal', 200);",
                        "        cy.get('.sw-product-modal-variant-generation').should('not.exist');",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "tests/e2e/cypress/support/pages/module/sw-property.page-object.js": {
                    "contents": [
                        "import elements from '../sw-general.page-object';",
                        "",
                        "export default class PropertyPageObject {",
                        "    constructor() {",
                        "        this.elements = {",
                        "            ...elements,",
                        "            ...{",
                        "                mediaForm: '.sw-product-media-form',",
                        "                propertySaveAction: '.sw-property-detail__save-action',",
                        "                productListName: `${elements.dataGridColumn}--name`",
                        "            }",
                        "        };",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "tests/e2e/cypress/support/pages/module/sw-rule.page-object.js": {
                    "contents": [
                        "/* global cy */",
                        "import elements from '../sw-general.page-object';",
                        "",
                        "export default class RuleBuilderPageObject {",
                        "    constructor() {",
                        "        this.elements = {",
                        "            ...elements,",
                        "            ...{",
                        "                columnName: '.sw-settings-rule-list__column-name',",
                        "                ruleSaveAction: '.sw-settings-rule-detail__save-action',",
                        "                ruleDeleteAction: '.sw-condition-or-container__actions--delete',",
                        "                searchCondition: '.sw-single-select__selection-text',",
                        "            }",
                        "        };",
                        "    }",
                        "",
                        "    createBasicSelectCondition({ selector, type, operator, value }) {",
                        "        this.selectTypeAndOperator(selector, type, operator);",
                        "",
                        "        if (value !== undefined) {",
                        "            cy.get(selector).within(() => {",
                        "                cy.get('.sw-select').last().as('value-select');",
                        "                cy.get('@value-select').click();",
                        "                selectResultList().should('be.visible').contains(value).click();",
                        "            });",
                        "        }",
                        "    }",
                        "",
                        "    createBasicSelectConditionFromSearch({ selector, type, operator, value }) {",
                        "        this.selectTypeAndOperator(selector, type, operator);",
                        "",
                        "        if (value !== undefined) {",
                        "            cy.get(selector).within(() => {",
                        "                cy.get('.sw-select input').last().type(value);",
                        "                selectResultList().should('be.visible');",
                        "",
                        "                selectResultList()",
                        "                    .find('.sw-select-result')",
                        "                    .should('have.length', 1)",
                        "                    .contains(value)",
                        "                    .click();",
                        "            });",
                        "        }",
                        "    }",
                        "",
                        "    createBasicInputCondition({ selector, type, operator, inputName, value }) {",
                        "        this.selectTypeAndOperator(selector, type, operator);",
                        "",
                        "        if (value !== undefined) {",
                        "            cy.get(selector).within(() => {",
                        "                cy.get(`input[name=sw-field--${inputName}]`).type(value).blur();",
                        "            });",
                        "        }",
                        "    }",
                        "",
                        "    selectTypeAndOperator(selector, type, operator) {",
                        "        if (isNonEmptyString(type)) {",
                        "            cy.get(selector).within(() => {",
                        "                cy.get('.sw-condition-type-select .sw-select').click();",
                        "",
                        "                selectResultList().scrollIntoView();",
                        "                selectResultList()",
                        "                    // find the exact type in the results and not only a substring!",
                        "                    .contains('.sw-select-result', new RegExp('^\\\\s*' + type + '\\\\s*$'))",
                        "                    .scrollIntoView()",
                        "                    .click();",
                        "            });",
                        "        }",
                        "",
                        "        if (isNonEmptyString(operator)) {",
                        "            cy.get(selector).within(() => {",
                        "                cy.get('.sw-condition-operator-select .sw-select').click();",
                        "                selectResultList().should('be.visible');",
                        "                selectResultList().contains(operator).click();",
                        "            });",
                        "        }",
                        "    }",
                        "}",
                        "",
                        "function isNonEmptyString(value) {",
                        "    return typeof value === 'string' && value !== '';",
                        "}",
                        "",
                        "function selectResultList() {",
                        "    return cy.window().then(() => {",
                        "        return cy.wrap(Cypress.$('.sw-select-result-list-popover-wrapper'));",
                        "    });",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "tests/e2e/cypress/support/pages/module/sw-sales-channel.page-object.js": {
                    "contents": [
                        "/* global cy */",
                        "import elements from '../sw-general.page-object';",
                        "",
                        "export default class SalesChannelPageObject {",
                        "    constructor() {",
                        "        this.elements = {",
                        "            ...elements,",
                        "            ...{",
                        "                salesChannelMenuName: '.sw-admin-menu__sales-channel-item',",
                        "                salesChannelModal: '.sw-sales-channel-modal',",
                        "                salesChannelNameInput: 'input[name=sw-field--salesChannel-name]',",
                        "                salesChannelMenuTitle: '.sw-admin-menu__sales-channel-item .collapsible-text',",
                        "                apiAccessKeyField: 'input[name=sw-field--salesChannel-accessKey]',",
                        "                salesChannelSaveAction: '.sw-sales-channel-detail__save-action'",
                        "            }",
                        "        };",
                        "    }",
                        "",
                        "    fillInBasicSalesChannelData(salesChannelName) {",
                        "        cy.get(this.elements.salesChannelNameInput).typeAndCheck(salesChannelName);",
                        "",
                        "        cy.get('.sw-sales-channel-detail__select-navigation-category-id .sw-block-field__block .sw-category-tree__input-field').click();",
                        "        cy.get('.sw-category-tree-field__results .sw-tree__content')",
                        "            .contains('.sw-tree-item__element', 'Home')",
                        "            .find('.sw-field__checkbox input')",
                        "            .click({force: true});",
                        "",
                        "        // Closes the category overlay again",
                        "        cy.get(this.elements.salesChannelNameInput).click();",
                        "",
                        "        cy.get('.sw-sales-channel-detail__select-customer-group')",
                        "            .typeSingleSelectAndCheck('Standard customer group', '.sw-sales-channel-detail__select-customer-group');",
                        "",
                        "        cy.get('.sw-sales-channel-detail__select-countries').scrollIntoView();",
                        "        cy.get('.sw-sales-channel-detail__select-countries').typeMultiSelectAndCheck('Germany', {",
                        "            searchTerm: 'Germany'",
                        "        });",
                        "        cy.contains('.sw-sales-channel-detail__assign-countries', 'Germany');",
                        "",
                        "        cy.get('.sw-sales-channel-detail__select-languages').scrollIntoView();",
                        "        cy.get('.sw-sales-channel-detail__select-languages').typeMultiSelectAndCheck('English', {",
                        "            searchTerm: 'English'",
                        "        });",
                        "        cy.contains('.sw-sales-channel-detail__assign-languages', 'English');",
                        "",
                        "        cy.get('.sw-sales-channel-detail__select-payment-methods').scrollIntoView();",
                        "        cy.get('.sw-sales-channel-detail__select-payment-methods').typeMultiSelectAndCheck('Invoice', {",
                        "            searchTerm: 'Invoice'",
                        "        });",
                        "        cy.get('.sw-sales-channel-detail__assign-payment-methods').should('contain', 'Invoice');",
                        "",
                        "        cy.get('.sw-sales-channel-detail__select-shipping-methods').scrollIntoView();",
                        "        cy.get('.sw-sales-channel-detail__select-shipping-methods').typeMultiSelectAndCheck('Standard', {",
                        "            searchTerm: 'Standard'",
                        "        });",
                        "        cy.contains('.sw-sales-channel-detail__assign-shipping-methods', 'Standard');",
                        "",
                        "        cy.get('.sw-sales-channel-detail__select-currencies').scrollIntoView();",
                        "        cy.get('.sw-sales-channel-detail__select-currencies').typeMultiSelectAndCheck('Euro', {",
                        "            searchTerm: 'Euro'",
                        "        });",
                        "        cy.contains('.sw-sales-channel-detail__assign-currencies', 'Euro');",
                        "    }",
                        "",
                        "    openSalesChannel(salesChannelName, position = 0) {",
                        "        cy.get(`${this.elements.salesChannelMenuName}--${position} > a`).contains(salesChannelName);",
                        "        cy.get(`${this.elements.salesChannelMenuName}--${position}`).click();",
                        "        cy.get(this.elements.smartBarHeader).contains(salesChannelName);",
                        "    }",
                        "",
                        "    deleteSingleSalesChannel(salesChannelName) {",
                        "        cy.get(this.elements.dangerButton).scrollIntoView();",
                        "        cy.get(this.elements.dangerButton).click();",
                        "        cy.get(this.elements.modal).should('be.visible');",
                        "        cy.get(`${this.elements.modal}__body .sw-sales-channel-detail-base__delete-modal-confirm-text`)",
                        "            .contains('Are you sure you want to delete this Sales Channel?');",
                        "        cy.get(`${this.elements.modal}__body .sw-sales-channel-detail-base__delete-modal-name`)",
                        "            .contains(salesChannelName);",
                        "",
                        "        cy.get(`${this.elements.modal}__footer button${this.elements.dangerButton}`).click();",
                        "        cy.get(this.elements.modal).should('not.exist');",
                        "    }",
                        "",
                        "    addExampleDomain(clickAddButton) {",
                        "        clickAddButton = clickAddButton === undefined ? true : clickAddButton;",
                        "",
                        "        cy.get('button').contains('Add domain').click();",
                        "        cy.get('.sw-modal__title').contains('Create domain');",
                        "",
                        "        cy.get('#sw-field--currentDomain-url').type('example.org');",
                        "",
                        "        cy.get('.sw-sales-channel-detail-domains__domain-language-select').find('.sw-single-select__selection').click();",
                        "        cy.contains('.sw-select-result', 'Deutsch').click();",
                        "",
                        "        cy.get('.sw-sales-channel-detail-domains__domain-currency-select').find('.sw-single-select__selection').click();",
                        "        cy.contains('.sw-select-result', 'Euro').click();",
                        "",
                        "        cy.contains('.sw-entity-single-select', 'Snippet').find('.sw-entity-single-select__selection').click();",
                        "        cy.contains('.sw-select-result', 'BASE de-DE').click();",
                        "",
                        "        if (clickAddButton) {",
                        "            cy.contains('.sw-button--primary', 'Add domain').click();",
                        "        }",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "tests/e2e/cypress/support/pages/module/sw-settings.page-object.js": {
                    "contents": [
                        "import elements from '../sw-general.page-object';",
                        "",
                        "export default class SettingsPageObject {",
                        "    constructor() {",
                        "        this.elements = {",
                        "            ...elements,",
                        "            ...{",
                        "                countryListContent: '.sw-settings-country-list-grid',",
                        "                countrySaveAction: '.sw-settings-country-detail__save-action',",
                        "                countryColumnName: '.sw-data-grid__cell--name',",
                        "",
                        "                countryStateListContent: '.sw-settings-country-state-list__content',",
                        "                countryStateSaveAction: '.sw-country-state-detail__save-button',",
                        "                countryStateAddAction: '.sw-settings-country-detail__add-country-state-button',",
                        "                countryStateColumnName: '.sw-data-grid__cell--translated-name',",
                        "",
                        "                currencySaveAction: '.sw-settings-currency-detail__save-action',",
                        "                currencyColumnName: '.sw-data-grid__cell--name',",
                        "",
                        "                deliveryTimeSaveAction: '.sw-settings-delivery-time-detail__save',",
                        "                deliveryTimeColumnName: '.sw-data-grid__cell--name',",
                        "                deliveryTimeColumnUnit: '.sw-data-grid__cell--unit',",
                        "",
                        "                languageSaveAction: '.sw-settings-language-detail__save-action',",
                        "                languageColumnName: '.sw-language-list__column-name',",
                        "",
                        "                taxSaveAction: '.sw-settings-tax-detail__save-action',",
                        "                taxColumnName: '.sw-data-grid__cell--name',",
                        "",
                        "                customerGroupSaveAction: '.sw-settings-customer-group-detail__save',",
                        "                customerGroupColumnName: '.sw-data-grid__cell--name',",
                        "                customerGroupColumnTaxDisplay: '.sw-data-grid__cell--displayGross',",
                        "",
                        "                salutationListContent: '.sw-settings-salutation-list-grid',",
                        "",
                        "                numberRangeSaveAction: '.sw-settings-number-range-detail__save-action',",
                        "                numberRangeColumnName: '.sw-data-grid__cell--name',",
                        "",
                        "                integrationListContent: '.sw-integration-list',",
                        "",
                        "                mailTemplateSaveAction: '.sw-mail-template-detail__save-action',",
                        "                mailTemplateGridList: '#mailTemplateGrid',",
                        "                mailTemplateColumnDescription: '.sw-data-grid__cell--description',",
                        "                mailTemplateColumnSalesChannel: '.sw-data-grid__cell--salesChannels-salesChannel-name',",
                        "",
                        "                mailHeaderFooterSaveAction: '.sw-mail-header-footer-detail__save-action',",
                        "                mailHeaderFooterGridList: '#mailHeaderFooterGrid',",
                        "                mailHeaderFooterColumnName: '.sw-data-grid__cell--name',",
                        "                mailHeaderFooterColumnDescription: '.sw-data-grid__cell--description',",
                        "                mailHeaderFooterColumnSalesChannel: '.sw-data-grid__cell--salesChannels-name',",
                        "",
                        "                importExportProfileListing: '.sw-import-export-view-profiles__listing',",
                        "                importExportCreateNewProfileButton: '.sw-import-export-view-profiles__create-action',",
                        "",
                        "                importExportProfileWizard: '.sw-modal .sw-import-export-new-profile-wizard',",
                        "                importExportWizardGeneralPage: '.sw-import-export-edit-profile-general',",
                        "                importExportWizardCsvPage: '.sw-import-export-new-profile-wizard-csv-page',",
                        "                importExportWizardMappingPage: '.sw-import-export-new-profile-wizard-mapping-page',",
                        "",
                        "                importExportProfileNameField: '#sw-field--profile-label',",
                        "                importExportTypeSelect: '.sw-import-export-edit-profile-general__type-select',",
                        "                importExportObjectTypeSelect: '.sw-import-export-edit-profile-general__object-type-select',",
                        "                importExportMappingGrid: '.sw-import-export-edit-profile-modal-mapping__grid',",
                        "                importExportAddMappingButton: '.sw-import-export-edit-profile-modal-mapping__add-action',",
                        "                importExportEntityPathSelect: '.sw-import-export-entity-path-select'",
                        "            },",
                        "        };",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "tests/e2e/cypress/support/pages/module/sw-shipping.page-object.js": {
                    "contents": [
                        "/* global cy */",
                        "import elements from '../sw-general.page-object';",
                        "",
                        "export default class ShippingMethodPageObject {",
                        "    constructor() {",
                        "        this.elements = {",
                        "            ...elements,",
                        "            ...{",
                        "                shippingSaveAction: '.sw-settings-shipping-method-detail__save-action',",
                        "                shippingBackToListViewAction: '.sw-icon.icon--default-action-settings.sw-icon--small'",
                        "            }",
                        "        };",
                        "    }",
                        "",
                        "    createShippingMethod(name) {",
                        "        cy.get('input[name=sw-field--shippingMethod-name]').typeAndCheck(name);",
                        "        cy.get('.sw-settings-shipping-detail__delivery-time').typeSingleSelectAndCheck(",
                        "            '1-3 days',",
                        "            '.sw-settings-shipping-detail__delivery-time'",
                        "        );",
                        "        cy.get('.sw-settings-shipping-detail__top-rule').typeSingleSelectAndCheck(",
                        "            'Cart >= 0',",
                        "            '.sw-settings-shipping-detail__top-rule'",
                        "        );",
                        "        this.createShippingMethodTax();",
                        "        this.createShippingMethodPriceRule();",
                        "    }",
                        "",
                        "    createShippingMethodPriceRule() {",
                        "        cy.get('.sw-settings-shipping-price-matrices').then(($el) => {",
                        "            if ($el.find('.sw-settings-shipping-price-matrix').length <= 0) {",
                        "                cy.get('.sw-settings-shipping-price-matrices__actions').scrollIntoView();",
                        "                cy.get('.sw-settings-shipping-price-matrices__actions .sw-button').click();",
                        "",
                        "                cy.get('.sw-settings-shipping-price-matrices').scrollIntoView();",
                        "                cy.get('.sw-settings-shipping-price-matrix__empty--select-property').typeSingleSelect(",
                        "                    'Product quantity',",
                        "                    '.sw-settings-shipping-price-matrix__empty--select-property'",
                        "                );",
                        "",
                        "                cy.get('.sw-settings-shipping-price-matrix__empty--select-property').should('not.exist');",
                        "            }",
                        "        });",
                        "",
                        "",
                        "        cy.get(`${this.elements.dataGridRow}--0 .sw-data-grid__cell--quantityStart input`).type('0');",
                        "        cy.get(`${this.elements.dataGridRow}--0 .sw-data-grid__cell--quantityEnd input`).type('12');",
                        "",
                        "        cy.get(`${this.elements.dataGridRow}--0 .sw-settings-shipping-price-matrix__price input`).first().type('7.42');",
                        "",
                        "        cy.get(`${this.elements.dataGridRow}--1 .sw-settings-shipping-price-matrix__price input`).first().clear();",
                        "        cy.get(`${this.elements.dataGridRow}--1 .sw-settings-shipping-price-matrix__price input`).first().type('8.00');",
                        "        cy.get(`${this.elements.dataGridRow}--1 .sw-settings-shipping-price-matrix__price input`).eq(1).click();",
                        "        cy.get(`${this.elements.dataGridRow}--1 .sw-settings-shipping-price-matrix__price input`).eq(2).should('have.value', '213.88');",
                        "",
                        "        cy.get(this.elements.shippingSaveAction).click();",
                        "        cy.get(this.elements.successIcon).should('be.visible');",
                        "    }",
                        "",
                        "    createShippingMethodTax() {",
                        "        cy.window().then((win) => {",
                        "            // Fixed",
                        "            cy.get('.sw-settings-shipping__tax-type-selection').typeSingleSelectAndCheck(",
                        "                'Fixed',",
                        "                '.sw-settings-shipping__tax-type-selection'",
                        "            );",
                        "            cy.get('.sw-settings-shipping__tax-rate').should('exist');",
                        "            cy.get('.sw-settings-shipping__tax-rate').typeSingleSelectAndCheck(",
                        "                'Standard rate',",
                        "                '.sw-settings-shipping__tax-rate'",
                        "            );",
                        "",
                        "            // Auto",
                        "            cy.get('.sw-settings-shipping__tax-type-selection').typeSingleSelectAndCheck(",
                        "                'Auto',",
                        "                '.sw-settings-shipping__tax-type-selection'",
                        "            );",
                        "            cy.get('.sw-settings-shipping__tax-rate').should('not.exist');",
                        "",
                        "            // Highest",
                        "            cy.get('.sw-settings-shipping__tax-type-selection').typeSingleSelectAndCheck(",
                        "                'Highest',",
                        "                '.sw-settings-shipping__tax-type-selection'",
                        "            );",
                        "            cy.get('.sw-settings-shipping__tax-rate').should('not.exist');",
                        "        });",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "tests/e2e/cypress/support/pages/module/sw-snippet.page-object.js": {
                    "contents": [
                        "/* global cy */",
                        "import elements from '../sw-general.page-object';",
                        "",
                        "export default class SnippetPageObject {",
                        "    constructor() {",
                        "        this.elements = {",
                        "            ...elements,",
                        "            ...{",
                        "                editSetAction: '.sw-settings-snippet-set-list__edit-set-action',",
                        "                snippetSaveAction: '.sw-snippet-detail__save-action',",
                        "                countryColumnName: '.sw-country-list__column-name'",
                        "            }",
                        "        };",
                        "    }",
                        "",
                        "    createSnippet(name, translations) {",
                        "        cy.get(this.elements.smartBarHeader).contains('New snippet');",
                        "        cy.get(this.elements.snippetSaveAction).should('not.be.enabled');",
                        "",
                        "        cy.get('input[name=sw-field--translationKey]').type(name);",
                        "        cy.get('.sw-settings-snippet-detail__translation-field--0 input[name=sw-field--snippet-value]')",
                        "            .type(translations.de);",
                        "        cy.get('.sw-settings-snippet-detail__translation-field--1 input[name=sw-field--snippet-value]')",
                        "            .type(translations.en);",
                        "",
                        "        cy.get(this.elements.snippetSaveAction).should('be.enabled');",
                        "        cy.get(this.elements.snippetSaveAction).click();",
                        "        cy.get(this.elements.successIcon).should('be.visible');",
                        "    }",
                        "",
                        "    openAllSnippetSets() {",
                        "        cy.get(this.elements.editSetAction).should('not.be.enabled');",
                        "        cy.get('.sw-grid__header input[type=checkbox]').click();",
                        "        cy.get(this.elements.editSetAction).should('be.enabled');",
                        "",
                        "        cy.get(this.elements.editSetAction).click();",
                        "        cy.get(this.elements.smartBarHeader).contains('Snippets');",
                        "    }",
                        "",
                        "    filterSnippets(name, position = 0) {",
                        "        cy.get('.icon--default-action-filter').click();",
                        "        cy.get('input[name=addedSnippets]').click();",
                        "        cy.get('.sw-data-grid-skeleton').should('not.exist');",
                        "        cy.get(`${this.elements.dataGridRow}--${position}`).should('be.visible');",
                        "        cy.get(`${this.elements.dataGridRow}--${position} .sw-data-grid__cell--id`).contains(name);",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "tests/e2e/cypress/support/pages/sw-general.page-object.js": {
                    "contents": [
                        "export default {",
                        "    // General components",
                        "    loader: '.sw-loader',",
                        "    modal: '.sw-modal',",
                        "    modalTitle: '.sw-modal__title',",
                        "    modalFooter: '.sw-modal__footer',",
                        "    modalClose: '.sw-modal__close',",
                        "    selectSelectedItem: '.sw-select__selection',",
                        "    selectInput: '.sw-select__input',",
                        "",
                        "    // Admin menu",
                        "    adminMenu: '.sw-admin-menu',",
                        "",
                        "    // Smart bar",
                        "    smartBarHeader: '.smart-bar__header',",
                        "    smartBarAmount: '.sw-page__smart-bar-amount',",
                        "    smartBarBack: 'a.smart-bar__back-btn',",
                        "    smartBarSearch: '.sw-search-bar__input',",
                        "",
                        "    // Listing components",
                        "    gridRow: '.sw-grid__row',",
                        "    gridRowInlineEdit: '.sw-grid-row__inline-edit-action',",
                        "    dataGridRowInlineEdit: '.sw-data-grid__inline-edit-save',",
                        "",
                        "    dataGridRow: '.sw-data-grid__row',",
                        "    dataGridColumn: '.sw-data-grid__cell',",
                        "    dataGridInlineEditSave: '.sw-data-grid__inline-edit-save',",
                        "    inlineEditIndicator: '.is--inline-edit',",
                        "",
                        "    emptyState: '.sw-empty-state',",
                        "    contextMenu: '.sw-context-menu',",
                        "    contextMenuButton: '.sw-context-button__button',",
                        "",
                        "    // Create/detail components",
                        "    primaryButton: '.sw-button--primary',",
                        "    dangerButton: '.sw-button--danger',",
                        "    ghostButton: '.sw-button--ghost',",
                        "    cardTitle: '.sw-card__title',",
                        "",
                        "    // Notifications",
                        "    alert: '.sw-alert',",
                        "    alertClose: '.sw-alert__close',",
                        "    notification: '.sw-notifications__notification',",
                        "    successIcon: '.icon--small-default-checkmark-line-medium',",
                        "",
                        "    // Rule conditions",
                        "    conditionOrContainer: '.sw-condition-container__or-child',",
                        "    conditionAndContainer: '.sw-condition-container__and-child',",
                        "    subConditionContainer: '.container-condition-level__is--even',",
                        "    ruleFieldCondition: '.field--condition',",
                        "    orSpacer: '.condition-content__spacer--or',",
                        "    andSpacer: '.condition-content__spacer--and',",
                        "    baseCondition: '.sw-condition-base',",
                        "    productStreamFilter: '.sw-product-stream-filter',",
                        "",
                        "    // Listing",
                        "    manufacturerFilter:",
                        "        '#filter-panel-wrapper .filter-multi-select-manufacturer',",
                        "    productCard: '.cms-block-product-listing .card-body',",
                        "    filterLabel: '.custom-control-label',",
                        "",
                        "    // Product detail page",
                        "    productDetailManufacturerLink: '.filter-active',",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "tests/e2e/cypress/support/service/fixture/product-wishlist.fixture.js": {
                    "contents": [
                        "const StoreFixtureService = require('@shopware-ag/e2e-testsuite-platform/cypress/support/service/saleschannel/fixture.service');",
                        "",
                        "class productWishlistFixture extends StoreFixtureService{",
                        "    setProductWishlist(productId, customer) {",
                        "        return this.getClientId()",
                        "            .then((result) => {",
                        "                this.apiClient.setAccessKey(result);",
                        "            })",
                        "            .then(() => {",
                        "                return this.apiClient.post(`/account/login`, JSON.stringify({",
                        "                    username: customer.username,",
                        "                    password: customer.password",
                        "                }));",
                        "            })",
                        "            .then((response) => {",
                        "                return this.apiClient.setContextToken(response.data.contextToken);",
                        "            })",
                        "            .then(() => {",
                        "                return this.apiClient.post(`/customer/wishlist/add/${productId}`);",
                        "            })",
                        "            .catch((err) => {",
                        "                console.log('err :', err);",
                        "            });",
                        "    }",
                        "}",
                        "",
                        "module.exports = productWishlistFixture;",
                        "",
                        ""
                    ],
                    "executable": false
                },
                "tests/e2e/cypress/support/service/fixture/rule-builder.fixture.js": {
                    "contents": [
                        "// eslint-disable-next-line max-len",
                        "const AdminApiService = require('@shopware-ag/e2e-testsuite-platform/cypress/support/service/administration/admin-api.service');",
                        "",
                        "class RuleBuilderFixture {",
                        "    constructor(authInformation) {",
                        "        this.apiClient = new AdminApiService(authInformation);",
                        "    }",
                        "",
                        "    create(endpoint, rawData) {",
                        "        return this.apiClient.post(`/${endpoint}?response=true`, rawData);",
                        "    }",
                        "",
                        "    update(userData) {",
                        "        if (!userData.id) {",
                        "            throw new Error('Update fixtures must always contain an id');",
                        "        }",
                        "        return this.apiClient.patch(`/${userData.type}/${userData.id}`, userData.data);",
                        "    }",
                        "",
                        "    search(type, filter) {",
                        "        return this.apiClient.post(`/search/${type}?response=true`, {",
                        "            filter: [{",
                        "                field: filter.field ? filter.field : 'name',",
                        "                type: 'equals',",
                        "                value: filter.value",
                        "            }]",
                        "        });",
                        "    }",
                        "",
                        "    setRuleFixture(userData, shippingMethodName) {",
                        "        // Create rule fixture via api",
                        "        return this.create('rule', userData).then(() => {",
                        "            return this.search('rule', {",
                        "                field: 'name',",
                        "                value: 'Foobar'",
                        "            })",
                        "        }).then((ruleData) => {",
                        "            const ruleId = ruleData.id;",
                        "            // Get the shipping method id",
                        "            return this.search('shipping-method', {",
                        "                field: 'name',",
                        "                value: shippingMethodName",
                        "            }).then((shippingMethodData) => {",
                        "                const shippingMethodId = shippingMethodData.id;",
                        "",
                        "                return this.update({",
                        "                    type: 'shipping-method',",
                        "                    id: shippingMethodId,",
                        "                    data: {",
                        "                        availabilityRuleId: ruleId",
                        "                    }",
                        "                });",
                        "            });",
                        "        });",
                        "    }",
                        "}",
                        "",
                        "module.exports = RuleBuilderFixture;",
                        ""
                    ],
                    "executable": false
                },
                "tests/e2e/package.json": {
                    "contents": [
                        "{",
                        "  \"private\": true,",
                        "  \"license\": \"MIT\",",
                        "  \"scripts\": {",
                        "    \"cypress:open\": \"./node_modules/.bin/cypress open\",",
                        "    \"cypress:run\": \"./node_modules/.bin/cypress run\",",
                        "    \"cypress\": \"./node_modules/.bin/cypress\",",
                        "    \"open\": \"./node_modules/.bin/cypress open\",",
                        "    \"cy:run:chrome\": \"cypress run --browser chrome\",",
                        "    \"cy:run:firefox\": \"cypress run --browser firefox\",",
                        "    \"combine-reports\": \"mochawesome-merge cypress/results/mocha/*.json > cypress/mochareports/report.json\",",
                        "    \"generate-report\": \"marge cypress/mochareports/*.json -f report -o mochareports\"",
                        "  },",
                        "  \"dependencies\": {",
                        "    \"@babel/core\": \"^7.7.7\",",
                        "    \"@babel/register\": \"^7.7.4\",",
                        "    \"@percy/cypress\": \"^3.1.0\",",
                        "    \"@shopware-ag/e2e-testsuite-platform\": \"^4.0.0\",",
                        "    \"axios\": \"^0.21.4\",",
                        "    \"cypress-file-upload\": \"^5.0.8\",",
                        "    \"cypress-multi-reporters\": \"^1.4.0\",",
                        "    \"cypress-real-events\": \"^1.7.1\",",
                        "    \"mocha\": \"^7.2.0\",",
                        "    \"mocha-junit-reporter\": \"^1.23.1\",",
                        "    \"mochawesome\": \"^4.1.0\",",
                        "    \"uuid\": \"3.3.3\"",
                        "  },",
                        "  \"devDependencies\": {",
                        "    \"@percy/cli\": \"^1.0.0\",",
                        "    \"cypress\": \"10.7.0\",",
                        "    \"cypress-grep\": \"^3.0.2\",",
                        "    \"mochawesome-merge\": \"^4.2.0\",",
                        "    \"mochawesome-report-generator\": \"^4.1.0\"",
                        "  }",
                        "}"
                    ],
                    "executable": false
                },
                "tests/e2e/reporter-config.json": {
                    "contents": [
                        "{",
                        "  \"reporterEnabled\": \"mocha-junit-reporter, mochawesome\",",
                        "  \"mochaJunitReporterReporterOptions\": {",
                        "    \"mochaFile\": \"./../app/build/artifacts/e2e/my-test-output-[hash].xml\"",
                        "  },",
                        "  \"mochawesomeReporterOptions\": {",
                        "    \"reportDir\": \"./../app/build/artifacts/e2e/mochawesome/single-reports\",",
                        "    \"overwrite\": false,",
                        "    \"html\": false,",
                        "    \"json\": true",
                        "  }",
                        "}"
                    ],
                    "executable": false
                }
            },
            "ref": "586811ccebc92d9df54700f644bb3765b4abb549"
        }
    }
}
